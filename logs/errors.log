{
  message: {
    function: 'schemaValidator',
    error: ZodError: [
      {
        "validation": "uuid",
        "code": "invalid_string",
        "message": "El autor debe ser una cadena que represente a un uuid",
        "path": [
          "body",
          "author"
        ]
      }
    ]
        at Object.get error [as error] (C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\zod\lib\types.js:43:31)
        at ZodObject.parse (C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\zod\lib\types.js:141:22)
        at C:\Users\Adria\Documents\code\turco\informe5Backend\middlewares\zod.validate.ts:17:14
        at Layer.handle [as handle_request] (C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\express\lib\router\layer.js:95:5)
        at next (C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\express\lib\router\route.js:144:13)
        at complete (C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\passport\lib\middleware\authenticate.js:271:13)
        at C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\passport\lib\middleware\authenticate.js:278:15
        at pass (C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\passport\lib\authenticator.js:428:14)
        at Authenticator.transformAuthInfo (C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\passport\lib\authenticator.js:450:5)
        at C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\passport\lib\middleware\authenticate.js:275:22 {
      issues: [
        {
          validation: 'uuid',
          code: 'invalid_string',
          message: 'El autor debe ser una cadena que represente a un uuid',
          path: [ 'body', 'author' ]
        }
      ],
      addIssue: [Function (anonymous)],
      addIssues: [Function (anonymous)],
      errors: [
        {
          validation: 'uuid',
          code: 'invalid_string',
          message: 'El autor debe ser una cadena que represente a un uuid',
          path: [ 'body', 'author' ]
        }
      ]
    }
  },
  level: 'error'
}
{
  message: {
    function: 'schemaValidator',
    error: ZodError: [
      {
        "validation": "uuid",
        "code": "invalid_string",
        "message": "El autor debe ser una cadena que represente a un uuid",
        "path": [
          "body",
          "author"
        ]
      }
    ]
        at Object.get error [as error] (C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\zod\lib\types.js:43:31)
        at ZodObject.parse (C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\zod\lib\types.js:141:22)
        at C:\Users\Adria\Documents\code\turco\informe5Backend\middlewares\zod.validate.ts:17:14
        at Layer.handle [as handle_request] (C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\express\lib\router\layer.js:95:5)
        at next (C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\express\lib\router\route.js:144:13)
        at complete (C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\passport\lib\middleware\authenticate.js:271:13)
        at C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\passport\lib\middleware\authenticate.js:278:15
        at pass (C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\passport\lib\authenticator.js:428:14)
        at Authenticator.transformAuthInfo (C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\passport\lib\authenticator.js:450:5)
        at C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\passport\lib\middleware\authenticate.js:275:22 {
      issues: [
        {
          validation: 'uuid',
          code: 'invalid_string',
          message: 'El autor debe ser una cadena que represente a un uuid',
          path: [ 'body', 'author' ]
        }
      ],
      addIssue: [Function (anonymous)],
      addIssues: [Function (anonymous)],
      errors: [
        {
          validation: 'uuid',
          code: 'invalid_string',
          message: 'El autor debe ser una cadena que represente a un uuid',
          path: [ 'body', 'author' ]
        }
      ]
    }
  },
  level: 'error'
}
{
  message: {
    function: 'DatabaseHandler.FindById',
    error: PrismaClientKnownRequestError: 
    Invalid `prisma.users.findUniqueOrThrow()` invocation:
    
    
    Can't reach database server at `127.0.0.1`:`3306`
    
    Please make sure your database server is running at `127.0.0.1`:`3306`.
        at zr.handleRequestError (C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\@prisma\client\runtime\library.js:122:8308)
        at zr.handleAndLogRequestError (C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\@prisma\client\runtime\library.js:122:7697)
        at zr.request (C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\@prisma\client\runtime\library.js:122:7307)
        at C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\@prisma\client\runtime\library.js:112:550 {
      code: 'P1001',
      clientVersion: '5.0.0',
      meta: { database_host: '127.0.0.1', database_port: 3306 }
    }
  },
  level: 'error'
}
{
  message: {
    function: 'AuthService.jwtLoginVerify',
    error: TypeError: Cannot use 'in' operator to search for 'username' in null
        at AuthService.<anonymous> (C:\Users\Adria\Documents\code\turco\informe5Backend\auth\auth.service.ts:66:23)
        at Generator.next (<anonymous>)
        at fulfilled (C:\Users\Adria\Documents\code\turco\informe5Backend\auth\auth.service.ts:5:58)
  },
  level: 'error'
}
{
  message: {
    function: 'DatabaseHandler.FindById',
    error: PrismaClientKnownRequestError: 
    Invalid `prisma.users.findUniqueOrThrow()` invocation:
    
    
    Can't reach database server at `127.0.0.1`:`3306`
    
    Please make sure your database server is running at `127.0.0.1`:`3306`.
        at zr.handleRequestError (C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\@prisma\client\runtime\library.js:122:8308)
        at zr.handleAndLogRequestError (C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\@prisma\client\runtime\library.js:122:7697)
        at zr.request (C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\@prisma\client\runtime\library.js:122:7307)
        at C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\@prisma\client\runtime\library.js:112:550 {
      code: 'P1001',
      clientVersion: '5.0.0',
      meta: { database_host: '127.0.0.1', database_port: 3306 }
    }
  },
  level: 'error'
}
{
  message: {
    function: 'AuthService.jwtLoginVerify',
    error: TypeError: Cannot use 'in' operator to search for 'username' in null
        at AuthService.<anonymous> (C:\Users\Adria\Documents\code\turco\informe5Backend\auth\auth.service.ts:66:23)
        at Generator.next (<anonymous>)
        at fulfilled (C:\Users\Adria\Documents\code\turco\informe5Backend\auth\auth.service.ts:5:58)
  },
  level: 'error'
}
{
  message: {
    function: 'DatabaseHandler.FindById',
    error: PrismaClientInitializationError: 
    Invalid `prisma.users.findUniqueOrThrow()` invocation:
    
    
    Can't reach database server at `127.0.0.1`:`3306`
    
    Please make sure your database server is running at `127.0.0.1`:`3306`.
        at zr.handleRequestError (C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\@prisma\client\runtime\library.js:122:8581)
        at zr.handleAndLogRequestError (C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\@prisma\client\runtime\library.js:122:7697)
        at zr.request (C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\@prisma\client\runtime\library.js:122:7307)
        at C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\@prisma\client\runtime\library.js:112:550 {
      clientVersion: '5.0.0',
      errorCode: undefined
    }
  },
  level: 'error'
}
{
  message: {
    function: 'DatabaseHandler.FindById',
    error: PrismaClientInitializationError: 
    Invalid `prisma.users.findUniqueOrThrow()` invocation:
    
    
    Can't reach database server at `127.0.0.1`:`3306`
    
    Please make sure your database server is running at `127.0.0.1`:`3306`.
        at zr.handleRequestError (C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\@prisma\client\runtime\library.js:122:8581)
        at zr.handleAndLogRequestError (C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\@prisma\client\runtime\library.js:122:7697)
        at zr.request (C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\@prisma\client\runtime\library.js:122:7307)
        at C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\@prisma\client\runtime\library.js:112:550 {
      clientVersion: '5.0.0',
      errorCode: undefined
    }
  },
  level: 'error'
}
{
  message: {
    function: 'AuthService.localLoginVerify',
    error: PrismaClientInitializationError: 
    Invalid `this.prisma.users.findUniqueOrThrow()` invocation in
    C:\Users\Adria\Documents\code\turco\informe5Backend\auth\auth.service.ts:40:106
    
      37 },
      38 public localLoginVerify = async (req: Request, username: string, password: string, done: DoneType) => {
      39   try {
    â†’ 40     const user: Prisma.UsersCreateInput | Prisma.UsersUncheckedCreateInput = await this.prisma.users.findUniqueOrThrow(
    Can't reach database server at `127.0.0.1`:`3306`
    
    Please make sure your database server is running at `127.0.0.1`:`3306`.
        at zr.handleRequestError (C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\@prisma\client\runtime\library.js:122:8581)
        at zr.handleAndLogRequestError (C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\@prisma\client\runtime\library.js:122:7697)
        at zr.request (C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\@prisma\client\runtime\library.js:122:7307)
        at C:\Users\Adria\Documents\code\turco\informe5Backend\node_modules\@prisma\client\runtime\library.js:112:550 {
      clientVersion: '5.0.0',
      errorCode: undefined
    }
  },
  level: 'error'
}
{
  message: {
    function: 'AuthService.jwtLoginVerify',
    error: TypeError: Cannot use 'in' operator to search for 'username' in null
        at AuthService.<anonymous> (C:\Users\Adria\Documents\code\turco\informe5Backend\auth\auth.service.ts:68:23)
        at Generator.next (<anonymous>)
        at fulfilled (C:\Users\Adria\Documents\code\turco\informe5Backend\auth\auth.service.ts:5:58)
  },
  level: 'error'
}
{
  message: {
    function: 'AuthService.jwtLoginVerify',
    error: TypeError: Cannot use 'in' operator to search for 'username' in null
        at AuthService.<anonymous> (C:\Users\Adria\Documents\code\turco\informe5Backend\auth\auth.service.ts:68:23)
        at Generator.next (<anonymous>)
        at fulfilled (C:\Users\Adria\Documents\code\turco\informe5Backend\auth\auth.service.ts:5:58)
  },
  level: 'error'
}
{
  message: {
    function: 'facebookService.deleteFacebookPost',
    error: AxiosError: Request failed with status code 400
        at settle (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\axios\lib\core\settle.js:19:12)
        at BrotliDecompress.handleStreamEnd (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\axios\lib\adapters\http.js:570:11)
        at BrotliDecompress.emit (node:events:526:35)
        at endReadableNT (node:internal/streams/readable:1589:12)
        at processTicksAndRejections (node:internal/process/task_queues:82:21) {
      code: 'ERR_BAD_REQUEST',
      config: {
        transitional: {
          silentJSONParsing: true,
          forcedJSONParsing: true,
          clarifyTimeoutError: false
        },
        adapter: [ 'xhr', 'http' ],
        transformRequest: [ [Function: transformRequest] ],
        transformResponse: [ [Function: transformResponse] ],
        timeout: 0,
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
        maxContentLength: -1,
        maxBodyLength: -1,
        env: {
          FormData: [Function: FormData] {
            LINE_BREAK: '\r\n',
            DEFAULT_CONTENT_TYPE: 'application/octet-stream'
          },
          Blob: [class Blob]
        },
        validateStatus: [Function: validateStatus],
        headers: AxiosHeaders {
          Accept: 'application/json, text/plain, */*',
          'User-Agent': 'axios/1.4.0',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        method: 'delete',
        url: 'https://graph.facebook.com/v16.0/112768655243132_193549723829605?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
        data: undefined
      },
      request: <ref *3> ClientRequest {
        _events: [Object: null prototype] {
          abort: [Function (anonymous)],
          aborted: [Function (anonymous)],
          connect: [Function (anonymous)],
          error: [Function (anonymous)],
          socket: [Function (anonymous)],
          timeout: [Function (anonymous)],
          finish: [Function: requestOnFinish]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: false,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        strictContentLength: false,
        _contentLength: 0,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        _closed: true,
        socket: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: <Buffer 30 82 07 9e 02 01 01 02 02 03 04 04 02 13 03 04 20 c0 b7 b3 43 4c 5f 88 6d f2 0d df b6 9e f5 2f 4a 37 6e 7b ee e2 c0 27 2e 1f e1 40 73 ed a0 6a cf 04 ... 1904 more bytes>,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'graph.facebook.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: bound onceWrapper] {
              listener: [Function: freeSocketErrorListener]
            }
          },
          _eventsCount: 9,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'graph.facebook.com',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            awaitDrainWriters: null,
            [Symbol(kState)]: 60035160
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            highWaterMark: 16384,
            length: 0,
            corked: 0,
            onwrite: [Function: bound onwrite],
            writelen: 0,
            bufferedIndex: 0,
            pendingcb: 0,
            [Symbol(kState)]: 34340932,
            [Symbol(kBufferedValue)]: null,
            [Symbol(kWriteCbValue)]: [Function: bound onFinish]
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: null,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          timeout: 5000,
          parser: null,
          _httpMessage: null,
          [Symbol(alpncallback)]: null,
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: null,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: -1,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: null,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: Timeout {
            _idleTimeout: 5000,
            _idlePrev: [TimersList],
            _idleNext: [Timeout],
            _idleStart: 149677,
            _onTimeout: [Function: bound ],
            _timerArgs: undefined,
            _repeat: null,
            _destroyed: false,
            [Symbol(refed)]: false,
            [Symbol(kHasPrimitive)]: false,
            [Symbol(asyncId)]: 2850,
            [Symbol(triggerId)]: 2848
          },
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 1,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            session: <Buffer 30 82 07 9e 02 01 01 02 02 03 04 04 02 13 03 04 20 c0 b7 b3 43 4c 5f 88 6d f2 0d df b6 9e f5 2f 4a 37 6e 7b ee e2 c0 27 2e 1f e1 40 73 ed a0 6a cf 04 ... 1904 more bytes>,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'DELETE',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'User-Agent': 'axios/1.4.0',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            lookup: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'graph.facebook.com',
            port: 443,
            agent: undefined,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    keepAlive: true,
                    scheduling: 'lifo',
                    timeout: 5000,
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {},
                  freeSockets: [Object: null prototype] {
                    'graph.facebook.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  keepAliveMsecs: 1000,
                  keepAlive: true,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'graph.facebook.com:443:::::::::::::::::::::': <Buffer 30 82 07 9f 02 01 01 02 02 03 04 04 02 13 03 04 20 27 c5 8c 2e 19 f3 05 ac 16 2c 2e e7 a4 47 01 f5 5a eb 56 4b 24 20 5b 84 3d 7a 96 b1 04 3d 0d 0e 04 ... 1905 more bytes>
                    },
                    list: [ 'graph.facebook.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v16.0/112768655243132_193549723829605',
            search: '?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
            _defaultAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                keepAlive: true,
                scheduling: 'lifo',
                timeout: 5000,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {
                'graph.facebook.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              keepAliveMsecs: 1000,
              keepAlive: true,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'graph.facebook.com:443:::::::::::::::::::::': <Buffer 30 82 07 9f 02 01 01 02 02 03 04 04 02 13 03 04 20 27 c5 8c 2e 19 f3 05 ac 16 2c 2e e7 a4 47 01 f5 5a eb 56 4b 24 20 5b 84 3d 7a 96 b1 04 3d 0d 0e 04 ... 1905 more bytes>
                },
                list: [ 'graph.facebook.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'graph.facebook.com',
            keepAlive: true,
            scheduling: 'lifo',
            timeout: 5000,
            noDelay: true,
            servername: 'graph.facebook.com',
            _agentKey: 'graph.facebook.com:443:::::::::::::::::::::',
            encoding: null,
            keepAliveInitialDelay: 1000
          }
        },
        _header: 'DELETE /v16.0/112768655243132_193549723829605?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'User-Agent: axios/1.4.0\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: graph.facebook.com\r\n' +
          'Connection: keep-alive\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: nop],
        agent: <ref *2> Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] {
            keepAlive: true,
            scheduling: 'lifo',
            timeout: 5000,
            noDelay: true,
            path: null
          },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {},
          freeSockets: [Object: null prototype] {
            'graph.facebook.com:443:::::::::::::::::::::': [
              <ref *1> TLSSocket {
                _tlsOptions: {
                  allowHalfOpen: undefined,
                  pipe: false,
                  secureContext: SecureContext { context: SecureContext {} },
                  isServer: false,
                  requestCert: true,
                  rejectUnauthorized: true,
                  session: <Buffer 30 82 07 9e 02 01 01 02 02 03 04 04 02 13 03 04 20 c0 b7 b3 43 4c 5f 88 6d f2 0d df b6 9e f5 2f 4a 37 6e 7b ee e2 c0 27 2e 1f e1 40 73 ed a0 6a cf 04 ... 1904 more bytes>,
                  ALPNProtocols: undefined,
                  requestOCSP: undefined,
                  enableTrace: undefined,
                  pskCallback: undefined,
                  highWaterMark: undefined,
                  onread: undefined,
                  signal: undefined
                },
                _secureEstablished: true,
                _securePending: false,
                _newSessionPending: false,
                _controlReleased: true,
                secureConnecting: false,
                _SNICallback: null,
                servername: 'graph.facebook.com',
                alpnProtocol: false,
                authorized: true,
                authorizationError: null,
                encrypted: true,
                _events: [Object: null prototype] {
                  close: [
                    [Function: onSocketCloseDestroySSL],
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    [Function: onClose]
                  ],
                  end: [Function: onReadableStreamEnd],
                  newListener: [Function: keylogNewListener],
                  secure: [Function: onConnectSecure],
                  session: [Function (anonymous)],
                  free: [Function: onFree],
                  timeout: [Function: onTimeout],
                  agentRemove: [Function: onRemove],
                  error: [Function: bound onceWrapper] {
                    listener: [Function: freeSocketErrorListener]
                  }
                },
                _eventsCount: 9,
                connecting: false,
                _hadError: false,
                _parent: null,
                _host: 'graph.facebook.com',
                _closeAfterHandlingError: false,
                _readableState: ReadableState {
                  highWaterMark: 16384,
                  buffer: BufferList { head: null, tail: null, length: 0 },
                  length: 0,
                  pipes: [],
                  awaitDrainWriters: null,
                  [Symbol(kState)]: 60035160
                },
                _maxListeners: undefined,
                _writableState: WritableState {
                  highWaterMark: 16384,
                  length: 0,
                  corked: 0,
                  onwrite: [Function: bound onwrite],
                  writelen: 0,
                  bufferedIndex: 0,
                  pendingcb: 0,
                  [Symbol(kState)]: 34340932,
                  [Symbol(kBufferedValue)]: null,
                  [Symbol(kWriteCbValue)]: [Function: bound onFinish]
                },
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: undefined,
                _server: null,
                ssl: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: null,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _requestCert: true,
                _rejectUnauthorized: true,
                timeout: 5000,
                parser: null,
                _httpMessage: null,
                [Symbol(alpncallback)]: null,
                [Symbol(res)]: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: null,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                [Symbol(verified)]: true,
                [Symbol(pendingSession)]: null,
                [Symbol(async_id_symbol)]: -1,
                [Symbol(kHandle)]: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: null,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: Timeout {
                  _idleTimeout: 5000,
                  _idlePrev: [TimersList],
                  _idleNext: [Timeout],
                  _idleStart: 149677,
                  _onTimeout: [Function: bound ],
                  _timerArgs: undefined,
                  _repeat: null,
                  _destroyed: false,
                  [Symbol(refed)]: false,
                  [Symbol(kHasPrimitive)]: false,
                  [Symbol(asyncId)]: 2850,
                  [Symbol(triggerId)]: 2848
                },
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: false,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 1,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0,
                [Symbol(connect-options)]: {
                  rejectUnauthorized: true,
                  ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                  checkServerIdentity: [Function: checkServerIdentity],
                  minDHSize: 1024,
                  session: <Buffer 30 82 07 9e 02 01 01 02 02 03 04 04 02 13 03 04 20 c0 b7 b3 43 4c 5f 88 6d f2 0d df b6 9e f5 2f 4a 37 6e 7b ee e2 c0 27 2e 1f e1 40 73 ed a0 6a cf 04 ... 1904 more bytes>,
                  maxRedirects: 21,
                  maxBodyLength: Infinity,
                  protocol: 'https:',
                  path: null,
                  method: 'DELETE',
                  headers: [Object: null prototype] {
                    Accept: 'application/json, text/plain, */*',
                    'User-Agent': 'axios/1.4.0',
                    'Accept-Encoding': 'gzip, compress, deflate, br'
                  },
                  agents: { http: undefined, https: undefined },
                  auth: undefined,
                  family: undefined,
                  lookup: undefined,
                  beforeRedirect: [Function: dispatchBeforeRedirect],
                  beforeRedirects: { proxy: [Function: beforeRedirect] },
                  hostname: 'graph.facebook.com',
                  port: 443,
                  agent: undefined,
                  nativeProtocols: {
                    'http:': {
                      _connectionListener: [Function: connectionListener],
                      METHODS: [
                        'ACL',         'BIND',       'CHECKOUT',
                        'CONNECT',     'COPY',       'DELETE',
                        'GET',         'HEAD',       'LINK',
                        'LOCK',        'M-SEARCH',   'MERGE',
                        'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                        'MOVE',        'NOTIFY',     'OPTIONS',
                        'PATCH',       'POST',       'PROPFIND',
                        'PROPPATCH',   'PURGE',      'PUT',
                        'REBIND',      'REPORT',     'SEARCH',
                        'SOURCE',      'SUBSCRIBE',  'TRACE',
                        'UNBIND',      'UNLINK',     'UNLOCK',
                        'UNSUBSCRIBE'
                      ],
                      STATUS_CODES: {
                        '100': 'Continue',
                        '101': 'Switching Protocols',
                        '102': 'Processing',
                        '103': 'Early Hints',
                        '200': 'OK',
                        '201': 'Created',
                        '202': 'Accepted',
                        '203': 'Non-Authoritative Information',
                        '204': 'No Content',
                        '205': 'Reset Content',
                        '206': 'Partial Content',
                        '207': 'Multi-Status',
                        '208': 'Already Reported',
                        '226': 'IM Used',
                        '300': 'Multiple Choices',
                        '301': 'Moved Permanently',
                        '302': 'Found',
                        '303': 'See Other',
                        '304': 'Not Modified',
                        '305': 'Use Proxy',
                        '307': 'Temporary Redirect',
                        '308': 'Permanent Redirect',
                        '400': 'Bad Request',
                        '401': 'Unauthorized',
                        '402': 'Payment Required',
                        '403': 'Forbidden',
                        '404': 'Not Found',
                        '405': 'Method Not Allowed',
                        '406': 'Not Acceptable',
                        '407': 'Proxy Authentication Required',
                        '408': 'Request Timeout',
                        '409': 'Conflict',
                        '410': 'Gone',
                        '411': 'Length Required',
                        '412': 'Precondition Failed',
                        '413': 'Payload Too Large',
                        '414': 'URI Too Long',
                        '415': 'Unsupported Media Type',
                        '416': 'Range Not Satisfiable',
                        '417': 'Expectation Failed',
                        '418': "I'm a Teapot",
                        '421': 'Misdirected Request',
                        '422': 'Unprocessable Entity',
                        '423': 'Locked',
                        '424': 'Failed Dependency',
                        '425': 'Too Early',
                        '426': 'Upgrade Required',
                        '428': 'Precondition Required',
                        '429': 'Too Many Requests',
                        '431': 'Request Header Fields Too Large',
                        '451': 'Unavailable For Legal Reasons',
                        '500': 'Internal Server Error',
                        '501': 'Not Implemented',
                        '502': 'Bad Gateway',
                        '503': 'Service Unavailable',
                        '504': 'Gateway Timeout',
                        '505': 'HTTP Version Not Supported',
                        '506': 'Variant Also Negotiates',
                        '507': 'Insufficient Storage',
                        '508': 'Loop Detected',
                        '509': 'Bandwidth Limit Exceeded',
                        '510': 'Not Extended',
                        '511': 'Network Authentication Required'
                      },
                      Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                      ClientRequest: [Function: ClientRequest],
                      IncomingMessage: [Function: IncomingMessage],
                      OutgoingMessage: [Function: OutgoingMessage],
                      Server: [Function: Server],
                      ServerResponse: [Function: ServerResponse],
                      createServer: [Function: createServer],
                      validateHeaderName: [Function: __node_internal_],
                      validateHeaderValue: [Function: __node_internal_],
                      get: [Function: get],
                      request: [Function: request],
                      setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                      maxHeaderSize: [Getter],
                      globalAgent: [Getter/Setter]
                    },
                    'https:': {
                      Agent: [Function: Agent],
                      globalAgent: [Circular *2],
                      Server: [Function: Server],
                      createServer: [Function: createServer],
                      get: [Function: get],
                      request: [Function: request]
                    }
                  },
                  pathname: '/v16.0/112768655243132_193549723829605',
                  search: '?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
                  _defaultAgent: [Circular *2],
                  host: 'graph.facebook.com',
                  keepAlive: true,
                  scheduling: 'lifo',
                  timeout: 5000,
                  noDelay: true,
                  servername: 'graph.facebook.com',
                  _agentKey: 'graph.facebook.com:443:::::::::::::::::::::',
                  encoding: null,
                  keepAliveInitialDelay: 1000
                }
              }
            ]
          },
          keepAliveMsecs: 1000,
          keepAlive: true,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'graph.facebook.com:443:::::::::::::::::::::': <Buffer 30 82 07 9f 02 01 01 02 02 03 04 04 02 13 03 04 20 27 c5 8c 2e 19 f3 05 ac 16 2c 2e e7 a4 47 01 f5 5a eb 56 4b 24 20 5b 84 3d 7a 96 b1 04 3d 0d 0e 04 ... 1905 more bytes>
            },
            list: [ 'graph.facebook.com:443:::::::::::::::::::::' ]
          },
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'DELETE',
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        joinDuplicateHeaders: undefined,
        path: '/v16.0/112768655243132_193549723829605?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
        _ended: true,
        res: IncomingMessage {
          _readableState: ReadableState {
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            awaitDrainWriters: null,
            [Symbol(kState)]: 110426134
          },
          _events: [Object: null prototype] {
            end: [
              [Function: responseOnEnd],
              [Function: onend],
              [Function: onend]
            ],
            close: [
              [Function (anonymous)],
              [Function: onclose],
              [Function: onclose]
            ],
            finish: [ [Function: onfinish], [Function: onfinish] ],
            error: [
              [Function: onerror],
              [Function: onError],
              [Function: onerror]
            ]
          },
          _eventsCount: 4,
          _maxListeners: undefined,
          socket: null,
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          rawHeaders: [
            'Content-Encoding',
            'br',
            'Vary',
            'Origin',
            'Vary',
            'Accept-Encoding',
            'Access-Control-Allow-Origin',
            '*',
            'cross-origin-resource-policy',
            'cross-origin',
            'x-app-usage',
            '{"call_count":0,"total_cputime":0,"total_time":0}',
            'Content-Type',
            'application/json',
            'WWW-Authenticate',
            `OAuth "Facebook Platform" "invalid_request" "Unsupported delete request. Object with ID '112768655243132_193549723829605' does not exist, cannot be loaded due to missing permissions, or does not support this operation. Please read the Graph API documentation at https://developers.facebook.com/docs/graph-api"`,
            'facebook-api-version',
            'v16.0',
            'Strict-Transport-Security',
            'max-age=15552000; preload',
            'Pragma',
            'no-cache',
            'Cache-Control',
            'no-store',
            'Expires',
            'Sat, 01 Jan 2000 00:00:00 GMT',
            'x-fb-request-id',
            'AXg29N7JOYf5fn9DqfC5no6',
            'x-fb-trace-id',
            'FEfyeNJBy6D',
            'x-fb-rev',
            '1010465578',
            'X-FB-Debug',
            '21S05mPCPDVKBwA9SQo7zlRO3fkjuAOA4agEeUrfOeDn+3BMG3ZF1naLHaWVZMVgGKpPyGVlHvjDCEvUTTqi9w==',
            'Date',
            'Sat, 16 Dec 2023 11:17:49 GMT',
            'Proxy-Status',
            'http_request_error; e_clientaddr="AcIxCLXLRrRWsquLdE4yyhZiV2t_BNLrfMOgIqHVXuxtaorMBEDQir6T-0QR08_GVVhbDmln8JLOg_nLg8VLFdFSKTJrkaMU4bpdzClcnHEg-Xs"; e_fb_vipport="AcLdzP7uF7giW-nGbgsy7SYrmXI_1lrbxZ9pMOWmFSIn-Hr8qgXsbMn91Cac"; e_upip="AcI9I1igR5TfhoobpOVfPrLbtZKNSnDRhsPQJxHnuPj43L-uDVnaM-obSzHRq-N_19I9sPmiWwhIiZeUxTZz4YuOqba_2511G7w"; e_fb_hostheader="AcIjCxHhbF3PakRqnI0j4qLHu5d5r8QdI4X26a-SLtCPX5Fha0xRHocj9O_AgXM37aHd70xRmPVvjjDC"; e_fb_vipaddr="AcLBSCgz4GthNoZBl-0DOVR--1bEYmLfiGgTk4Ep3EdYRBj9zOnJ1t5T8VQevXrn4q0LWC5YoHQ3W_gQBY7BPgd-jKSW01pk5w"; e_fb_requesthandler="AcL7Xrldjve0jylQLNhNglkd0-WddDTJ0XwY1eKKn2y34imKUetOB9vfxKaQaKbKeqfwYBVxg8U"; e_fb_builduser="AcIKObLy9l2mhPDX7li2wo5kK1FkbzpfNwy-n9TZ8vJWn5fyiE2kJLp_PhwsHLTE3ZU"; e_fb_binaryversion="AcJHqopxypL2Y_LxFyyeQCKOe9XWW_UOYnkW4NIasd9P3XRvvcoQtpwaHLW52rLgO_yMOwr6hi2hM6QA26Lgmz40oZh_WUEY4M4"; e_proxy="AcLia5QvImxwXFjTPhawke2PnrMy0YalcgBsKHpgq4uHeMYqTjzT1AZagonmmMSF40uEqfzSRhiLEOq4-_M", http_request_error; e_clientaddr="AcJorpJTwANQ9fQAPwyKXXN0WSjpV5Hbrj8FXm5hKjSVOQ-mGn2easUJ5DVK5kxUNv6VUvl_61jlTADwOg"; e_fb_vipport="AcJIJB0sLXUxgBtcojiF2_VdR_wj7uFpqy2MRmUxI-sfJojbwQACzCLCByf0"; e_upip="AcLC8FBfXSfxClvstDEU-fRbSFQJ9jhfDKotgG8pk5_Kd9FjcYNG_8GvvsUJyfahUDhRDniyCJAT-l5lmSmMT2CI4x5WicgmcQ"; e_fb_hostheader="AcKxeafyx8F_I3Yg3h9sLkEHrt9n7RdiKok_aDJxfgM56jHwQuwma3hAVDd5b4zBsBh1FmNluYlvRRaG"; e_fb_vipaddr="AcJQsjOkq1siJsymCnLwg9vOSVFLPJIW6knFsgyXTiaT-R6gX240E0OYtazKUHUh5cfSMQ"; e_fb_requesthandler="AcIbkw7LWZ7tB0W-ahWKfVEcErOMWTWOy-iT3MHo79VyaVAx5FZujYPd1OTnFndHC77FSMJGoQU"; e_fb_builduser="AcLUK4tc-YMToLyl26gzkWYxww_52_hU0-JeZ4WLBzn5GNBVUeEb68HYdQON1iORGeA"; e_fb_binaryversion="AcJuyxBYohRCKRa0volVNjpE2ZDK_-de5J6LYokLb5I0_GcGOsreldC7Y-VdPHdIihnYH9xLMNIPp7sCFcTUJHQmsNEZgPbkbpc"; e_proxy="AcIsHMRzaVgRZNfwOhpJNpaTl3uKVwa2k3RW7k3H0zef5qqPdS0sBvySC-gZjBnDxiw42bcjL3HGxCw"',
            'Alt-Svc',
            'h3=":443"; ma=86400',
            'Connection',
            'keep-alive',
            'Content-Length',
            '273'
          ],
          rawTrailers: [],
          joinDuplicateHeaders: undefined,
          aborted: false,
          upgrade: false,
          url: '',
          method: null,
          statusCode: 400,
          statusMessage: 'Bad Request',
          client: <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: <Buffer 30 82 07 9e 02 01 01 02 02 03 04 04 02 13 03 04 20 c0 b7 b3 43 4c 5f 88 6d f2 0d df b6 9e f5 2f 4a 37 6e 7b ee e2 c0 27 2e 1f e1 40 73 ed a0 6a cf 04 ... 1904 more bytes>,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'graph.facebook.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: bound onceWrapper] {
                listener: [Function: freeSocketErrorListener]
              }
            },
            _eventsCount: 9,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'graph.facebook.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              awaitDrainWriters: null,
              [Symbol(kState)]: 60035160
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              highWaterMark: 16384,
              length: 0,
              corked: 0,
              onwrite: [Function: bound onwrite],
              writelen: 0,
              bufferedIndex: 0,
              pendingcb: 0,
              [Symbol(kState)]: 34340932,
              [Symbol(kBufferedValue)]: null,
              [Symbol(kWriteCbValue)]: [Function: bound onFinish]
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: null,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: true,
            timeout: 5000,
            parser: null,
            _httpMessage: null,
            [Symbol(alpncallback)]: null,
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: null,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: -1,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: null,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: Timeout {
              _idleTimeout: 5000,
              _idlePrev: [TimersList],
              _idleNext: [Timeout],
              _idleStart: 149677,
              _onTimeout: [Function: bound ],
              _timerArgs: undefined,
              _repeat: null,
              _destroyed: false,
              [Symbol(refed)]: false,
              [Symbol(kHasPrimitive)]: false,
              [Symbol(asyncId)]: 2850,
              [Symbol(triggerId)]: 2848
            },
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 1,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              session: <Buffer 30 82 07 9e 02 01 01 02 02 03 04 04 02 13 03 04 20 c0 b7 b3 43 4c 5f 88 6d f2 0d df b6 9e f5 2f 4a 37 6e 7b ee e2 c0 27 2e 1f e1 40 73 ed a0 6a cf 04 ... 1904 more bytes>,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'DELETE',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'User-Agent': 'axios/1.4.0',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              family: undefined,
              lookup: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'graph.facebook.com',
              port: 443,
              agent: undefined,
              nativeProtocols: {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *2> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      keepAlive: true,
                      scheduling: 'lifo',
                      timeout: 5000,
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {},
                    freeSockets: [Object: null prototype] {
                      'graph.facebook.com:443:::::::::::::::::::::': [ [Circular *1] ]
                    },
                    keepAliveMsecs: 1000,
                    keepAlive: true,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'graph.facebook.com:443:::::::::::::::::::::': <Buffer 30 82 07 9f 02 01 01 02 02 03 04 04 02 13 03 04 20 27 c5 8c 2e 19 f3 05 ac 16 2c 2e e7 a4 47 01 f5 5a eb 56 4b 24 20 5b 84 3d 7a 96 b1 04 3d 0d 0e 04 ... 1905 more bytes>
                      },
                      list: [ 'graph.facebook.com:443:::::::::::::::::::::' ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/v16.0/112768655243132_193549723829605',
              search: '?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
              _defaultAgent: <ref *2> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] {
                  keepAlive: true,
                  scheduling: 'lifo',
                  timeout: 5000,
                  noDelay: true,
                  path: null
                },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {
                  'graph.facebook.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                keepAliveMsecs: 1000,
                keepAlive: true,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'graph.facebook.com:443:::::::::::::::::::::': <Buffer 30 82 07 9f 02 01 01 02 02 03 04 04 02 13 03 04 20 27 c5 8c 2e 19 f3 05 ac 16 2c 2e e7 a4 47 01 f5 5a eb 56 4b 24 20 5b 84 3d 7a 96 b1 04 3d 0d 0e 04 ... 1905 more bytes>
                  },
                  list: [ 'graph.facebook.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'graph.facebook.com',
              keepAlive: true,
              scheduling: 'lifo',
              timeout: 5000,
              noDelay: true,
              servername: 'graph.facebook.com',
              _agentKey: 'graph.facebook.com:443:::::::::::::::::::::',
              encoding: null,
              keepAliveInitialDelay: 1000
            }
          },
          _consuming: true,
          _dumped: false,
          req: [Circular *3],
          responseUrl: 'https://graph.facebook.com/v16.0/112768655243132_193549723829605?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
          redirects: [],
          [Symbol(kCapture)]: false,
          [Symbol(kHeaders)]: {
            vary: 'Origin, Accept-Encoding',
            'access-control-allow-origin': '*',
            'cross-origin-resource-policy': 'cross-origin',
            'x-app-usage': '{"call_count":0,"total_cputime":0,"total_time":0}',
            'content-type': 'application/json',
            'www-authenticate': `OAuth "Facebook Platform" "invalid_request" "Unsupported delete request. Object with ID '112768655243132_193549723829605' does not exist, cannot be loaded due to missing permissions, or does not support this operation. Please read the Graph API documentation at https://developers.facebook.com/docs/graph-api"`,
            'facebook-api-version': 'v16.0',
            'strict-transport-security': 'max-age=15552000; preload',
            pragma: 'no-cache',
            'cache-control': 'no-store',
            expires: 'Sat, 01 Jan 2000 00:00:00 GMT',
            'x-fb-request-id': 'AXg29N7JOYf5fn9DqfC5no6',
            'x-fb-trace-id': 'FEfyeNJBy6D',
            'x-fb-rev': '1010465578',
            'x-fb-debug': '21S05mPCPDVKBwA9SQo7zlRO3fkjuAOA4agEeUrfOeDn+3BMG3ZF1naLHaWVZMVgGKpPyGVlHvjDCEvUTTqi9w==',
            date: 'Sat, 16 Dec 2023 11:17:49 GMT',
            'proxy-status': 'http_request_error; e_clientaddr="AcIxCLXLRrRWsquLdE4yyhZiV2t_BNLrfMOgIqHVXuxtaorMBEDQir6T-0QR08_GVVhbDmln8JLOg_nLg8VLFdFSKTJrkaMU4bpdzClcnHEg-Xs"; e_fb_vipport="AcLdzP7uF7giW-nGbgsy7SYrmXI_1lrbxZ9pMOWmFSIn-Hr8qgXsbMn91Cac"; e_upip="AcI9I1igR5TfhoobpOVfPrLbtZKNSnDRhsPQJxHnuPj43L-uDVnaM-obSzHRq-N_19I9sPmiWwhIiZeUxTZz4YuOqba_2511G7w"; e_fb_hostheader="AcIjCxHhbF3PakRqnI0j4qLHu5d5r8QdI4X26a-SLtCPX5Fha0xRHocj9O_AgXM37aHd70xRmPVvjjDC"; e_fb_vipaddr="AcLBSCgz4GthNoZBl-0DOVR--1bEYmLfiGgTk4Ep3EdYRBj9zOnJ1t5T8VQevXrn4q0LWC5YoHQ3W_gQBY7BPgd-jKSW01pk5w"; e_fb_requesthandler="AcL7Xrldjve0jylQLNhNglkd0-WddDTJ0XwY1eKKn2y34imKUetOB9vfxKaQaKbKeqfwYBVxg8U"; e_fb_builduser="AcIKObLy9l2mhPDX7li2wo5kK1FkbzpfNwy-n9TZ8vJWn5fyiE2kJLp_PhwsHLTE3ZU"; e_fb_binaryversion="AcJHqopxypL2Y_LxFyyeQCKOe9XWW_UOYnkW4NIasd9P3XRvvcoQtpwaHLW52rLgO_yMOwr6hi2hM6QA26Lgmz40oZh_WUEY4M4"; e_proxy="AcLia5QvImxwXFjTPhawke2PnrMy0YalcgBsKHpgq4uHeMYqTjzT1AZagonmmMSF40uEqfzSRhiLEOq4-_M", http_request_error; e_clientaddr="AcJorpJTwANQ9fQAPwyKXXN0WSjpV5Hbrj8FXm5hKjSVOQ-mGn2easUJ5DVK5kxUNv6VUvl_61jlTADwOg"; e_fb_vipport="AcJIJB0sLXUxgBtcojiF2_VdR_wj7uFpqy2MRmUxI-sfJojbwQACzCLCByf0"; e_upip="AcLC8FBfXSfxClvstDEU-fRbSFQJ9jhfDKotgG8pk5_Kd9FjcYNG_8GvvsUJyfahUDhRDniyCJAT-l5lmSmMT2CI4x5WicgmcQ"; e_fb_hostheader="AcKxeafyx8F_I3Yg3h9sLkEHrt9n7RdiKok_aDJxfgM56jHwQuwma3hAVDd5b4zBsBh1FmNluYlvRRaG"; e_fb_vipaddr="AcJQsjOkq1siJsymCnLwg9vOSVFLPJIW6knFsgyXTiaT-R6gX240E0OYtazKUHUh5cfSMQ"; e_fb_requesthandler="AcIbkw7LWZ7tB0W-ahWKfVEcErOMWTWOy-iT3MHo79VyaVAx5FZujYPd1OTnFndHC77FSMJGoQU"; e_fb_builduser="AcLUK4tc-YMToLyl26gzkWYxww_52_hU0-JeZ4WLBzn5GNBVUeEb68HYdQON1iORGeA"; e_fb_binaryversion="AcJuyxBYohRCKRa0volVNjpE2ZDK_-de5J6LYokLb5I0_GcGOsreldC7Y-VdPHdIihnYH9xLMNIPp7sCFcTUJHQmsNEZgPbkbpc"; e_proxy="AcIsHMRzaVgRZNfwOhpJNpaTl3uKVwa2k3RW7k3H0zef5qqPdS0sBvySC-gZjBnDxiw42bcjL3HGxCw"',
            'alt-svc': 'h3=":443"; ma=86400',
            connection: 'keep-alive',
            'content-length': '273'
          },
          [Symbol(kHeadersCount)]: 44,
          [Symbol(kTrailers)]: null,
          [Symbol(kTrailersCount)]: 0
        },
        aborted: false,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'graph.facebook.com',
        protocol: 'https:',
        _redirectable: Writable {
          _writableState: WritableState {
            highWaterMark: 16384,
            length: 0,
            corked: 0,
            onwrite: [Function: bound onwrite],
            writelen: 0,
            bufferedIndex: 0,
            pendingcb: 0,
            [Symbol(kState)]: 34357356,
            [Symbol(kBufferedValue)]: null
          },
          _events: [Object: null prototype] {
            response: [Function: handleResponse],
            error: [Function: handleRequestError],
            socket: [Function: handleRequestSocket]
          },
          _eventsCount: 3,
          _maxListeners: undefined,
          _options: {
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: '/v16.0/112768655243132_193549723829605?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
            method: 'DELETE',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'User-Agent': 'axios/1.4.0',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            lookup: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'graph.facebook.com',
            port: '',
            agent: undefined,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *2> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    keepAlive: true,
                    scheduling: 'lifo',
                    timeout: 5000,
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {},
                  freeSockets: [Object: null prototype] {
                    'graph.facebook.com:443:::::::::::::::::::::': [
                      <ref *1> TLSSocket {
                        _tlsOptions: {
                          allowHalfOpen: undefined,
                          pipe: false,
                          secureContext: SecureContext { context: SecureContext {} },
                          isServer: false,
                          requestCert: true,
                          rejectUnauthorized: true,
                          session: <Buffer 30 82 07 9e 02 01 01 02 02 03 04 04 02 13 03 04 20 c0 b7 b3 43 4c 5f 88 6d f2 0d df b6 9e f5 2f 4a 37 6e 7b ee e2 c0 27 2e 1f e1 40 73 ed a0 6a cf 04 ... 1904 more bytes>,
                          ALPNProtocols: undefined,
                          requestOCSP: undefined,
                          enableTrace: undefined,
                          pskCallback: undefined,
                          highWaterMark: undefined,
                          onread: undefined,
                          signal: undefined
                        },
                        _secureEstablished: true,
                        _securePending: false,
                        _newSessionPending: false,
                        _controlReleased: true,
                        secureConnecting: false,
                        _SNICallback: null,
                        servername: 'graph.facebook.com',
                        alpnProtocol: false,
                        authorized: true,
                        authorizationError: null,
                        encrypted: true,
                        _events: [Object: null prototype] {
                          close: [
                            [Function: onSocketCloseDestroySSL],
                            [Function: bound onceWrapper] {
                              listener: [Function (anonymous)]
                            },
                            [Function: onClose]
                          ],
                          end: [Function: onReadableStreamEnd],
                          newListener: [Function: keylogNewListener],
                          secure: [Function: onConnectSecure],
                          session: [Function (anonymous)],
                          free: [Function: onFree],
                          timeout: [Function: onTimeout],
                          agentRemove: [Function: onRemove],
                          error: [Function: bound onceWrapper] {
                            listener: [Function: freeSocketErrorListener]
                          }
                        },
                        _eventsCount: 9,
                        connecting: false,
                        _hadError: false,
                        _parent: null,
                        _host: 'graph.facebook.com',
                        _closeAfterHandlingError: false,
                        _readableState: ReadableState {
                          highWaterMark: 16384,
                          buffer: BufferList { head: null, tail: null, length: 0 },
                          length: 0,
                          pipes: [],
                          awaitDrainWriters: null,
                          [Symbol(kState)]: 60035160
                        },
                        _maxListeners: undefined,
                        _writableState: WritableState {
                          highWaterMark: 16384,
                          length: 0,
                          corked: 0,
                          onwrite: [Function: bound onwrite],
                          writelen: 0,
                          bufferedIndex: 0,
                          pendingcb: 0,
                          [Symbol(kState)]: 34340932,
                          [Symbol(kBufferedValue)]: null,
                          [Symbol(kWriteCbValue)]: [Function: bound onFinish]
                        },
                        allowHalfOpen: false,
                        _sockname: null,
                        _pendingData: null,
                        _pendingEncoding: '',
                        server: undefined,
                        _server: null,
                        ssl: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *1]
                          },
                          _parentWrap: null,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _requestCert: true,
                        _rejectUnauthorized: true,
                        timeout: 5000,
                        parser: null,
                        _httpMessage: null,
                        [Symbol(alpncallback)]: null,
                        [Symbol(res)]: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *1]
                          },
                          _parentWrap: null,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        [Symbol(verified)]: true,
                        [Symbol(pendingSession)]: null,
                        [Symbol(async_id_symbol)]: -1,
                        [Symbol(kHandle)]: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *1]
                          },
                          _parentWrap: null,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        [Symbol(lastWriteQueueSize)]: 0,
                        [Symbol(timeout)]: Timeout {
                          _idleTimeout: 5000,
                          _idlePrev: [TimersList],
                          _idleNext: [Timeout],
                          _idleStart: 149677,
                          _onTimeout: [Function: bound ],
                          _timerArgs: undefined,
                          _repeat: null,
                          _destroyed: false,
                          [Symbol(refed)]: false,
                          [Symbol(kHasPrimitive)]: false,
                          [Symbol(asyncId)]: 2850,
                          [Symbol(triggerId)]: 2848
                        },
                        [Symbol(kBuffer)]: null,
                        [Symbol(kBufferCb)]: null,
                        [Symbol(kBufferGen)]: null,
                        [Symbol(kCapture)]: false,
                        [Symbol(kSetNoDelay)]: false,
                        [Symbol(kSetKeepAlive)]: true,
                        [Symbol(kSetKeepAliveInitialDelay)]: 1,
                        [Symbol(kBytesRead)]: 0,
                        [Symbol(kBytesWritten)]: 0,
                        [Symbol(connect-options)]: {
                          rejectUnauthorized: true,
                          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                          checkServerIdentity: [Function: checkServerIdentity],
                          minDHSize: 1024,
                          session: <Buffer 30 82 07 9e 02 01 01 02 02 03 04 04 02 13 03 04 20 c0 b7 b3 43 4c 5f 88 6d f2 0d df b6 9e f5 2f 4a 37 6e 7b ee e2 c0 27 2e 1f e1 40 73 ed a0 6a cf 04 ... 1904 more bytes>,
                          maxRedirects: 21,
                          maxBodyLength: Infinity,
                          protocol: 'https:',
                          path: null,
                          method: 'DELETE',
                          headers: [Object: null prototype] {
                            Accept: 'application/json, text/plain, */*',
                            'User-Agent': 'axios/1.4.0',
                            'Accept-Encoding': 'gzip, compress, deflate, br'
                          },
                          agents: { http: undefined, https: undefined },
                          auth: undefined,
                          family: undefined,
                          lookup: undefined,
                          beforeRedirect: [Function: dispatchBeforeRedirect],
                          beforeRedirects: { proxy: [Function: beforeRedirect] },
                          hostname: 'graph.facebook.com',
                          port: 443,
                          agent: undefined,
                          nativeProtocols: [Circular *4],
                          pathname: '/v16.0/112768655243132_193549723829605',
                          search: '?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
                          _defaultAgent: [Circular *2],
                          host: 'graph.facebook.com',
                          keepAlive: true,
                          scheduling: 'lifo',
                          timeout: 5000,
                          noDelay: true,
                          servername: 'graph.facebook.com',
                          _agentKey: 'graph.facebook.com:443:::::::::::::::::::::',
                          encoding: null,
                          keepAliveInitialDelay: 1000
                        }
                      }
                    ]
                  },
                  keepAliveMsecs: 1000,
                  keepAlive: true,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'graph.facebook.com:443:::::::::::::::::::::': <Buffer 30 82 07 9f 02 01 01 02 02 03 04 04 02 13 03 04 20 27 c5 8c 2e 19 f3 05 ac 16 2c 2e e7 a4 47 01 f5 5a eb 56 4b 24 20 5b 84 3d 7a 96 b1 04 3d 0d 0e 04 ... 1905 more bytes>
                    },
                    list: [ 'graph.facebook.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v16.0/112768655243132_193549723829605',
            search: '?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD'
          },
          _ended: true,
          _ending: true,
          _redirectCount: 0,
          _redirects: [],
          _requestBodyLength: 0,
          _requestBodyBuffers: [],
          _onNativeResponse: [Function (anonymous)],
          _currentRequest: [Circular *3],
          _currentUrl: 'https://graph.facebook.com/v16.0/112768655243132_193549723829605?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
          [Symbol(kCapture)]: false
        },
        [Symbol(kCapture)]: false,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
          'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
          host: [ 'Host', 'graph.facebook.com' ]
        },
        [Symbol(errored)]: null,
        [Symbol(kHighWaterMark)]: 16384,
        [Symbol(kRejectNonStandardBodyWrites)]: false,
        [Symbol(kUniqueHeaders)]: null
      },
      response: {
        status: 400,
        statusText: 'Bad Request',
        headers: AxiosHeaders {
          vary: 'Origin, Accept-Encoding',
          'access-control-allow-origin': '*',
          'cross-origin-resource-policy': 'cross-origin',
          'x-app-usage': '{"call_count":0,"total_cputime":0,"total_time":0}',
          'content-type': 'application/json',
          'www-authenticate': `OAuth "Facebook Platform" "invalid_request" "Unsupported delete request. Object with ID '112768655243132_193549723829605' does not exist, cannot be loaded due to missing permissions, or does not support this operation. Please read the Graph API documentation at https://developers.facebook.com/docs/graph-api"`,
          'facebook-api-version': 'v16.0',
          'strict-transport-security': 'max-age=15552000; preload',
          pragma: 'no-cache',
          'cache-control': 'no-store',
          expires: 'Sat, 01 Jan 2000 00:00:00 GMT',
          'x-fb-request-id': 'AXg29N7JOYf5fn9DqfC5no6',
          'x-fb-trace-id': 'FEfyeNJBy6D',
          'x-fb-rev': '1010465578',
          'x-fb-debug': '21S05mPCPDVKBwA9SQo7zlRO3fkjuAOA4agEeUrfOeDn+3BMG3ZF1naLHaWVZMVgGKpPyGVlHvjDCEvUTTqi9w==',
          date: 'Sat, 16 Dec 2023 11:17:49 GMT',
          'proxy-status': 'http_request_error; e_clientaddr="AcIxCLXLRrRWsquLdE4yyhZiV2t_BNLrfMOgIqHVXuxtaorMBEDQir6T-0QR08_GVVhbDmln8JLOg_nLg8VLFdFSKTJrkaMU4bpdzClcnHEg-Xs"; e_fb_vipport="AcLdzP7uF7giW-nGbgsy7SYrmXI_1lrbxZ9pMOWmFSIn-Hr8qgXsbMn91Cac"; e_upip="AcI9I1igR5TfhoobpOVfPrLbtZKNSnDRhsPQJxHnuPj43L-uDVnaM-obSzHRq-N_19I9sPmiWwhIiZeUxTZz4YuOqba_2511G7w"; e_fb_hostheader="AcIjCxHhbF3PakRqnI0j4qLHu5d5r8QdI4X26a-SLtCPX5Fha0xRHocj9O_AgXM37aHd70xRmPVvjjDC"; e_fb_vipaddr="AcLBSCgz4GthNoZBl-0DOVR--1bEYmLfiGgTk4Ep3EdYRBj9zOnJ1t5T8VQevXrn4q0LWC5YoHQ3W_gQBY7BPgd-jKSW01pk5w"; e_fb_requesthandler="AcL7Xrldjve0jylQLNhNglkd0-WddDTJ0XwY1eKKn2y34imKUetOB9vfxKaQaKbKeqfwYBVxg8U"; e_fb_builduser="AcIKObLy9l2mhPDX7li2wo5kK1FkbzpfNwy-n9TZ8vJWn5fyiE2kJLp_PhwsHLTE3ZU"; e_fb_binaryversion="AcJHqopxypL2Y_LxFyyeQCKOe9XWW_UOYnkW4NIasd9P3XRvvcoQtpwaHLW52rLgO_yMOwr6hi2hM6QA26Lgmz40oZh_WUEY4M4"; e_proxy="AcLia5QvImxwXFjTPhawke2PnrMy0YalcgBsKHpgq4uHeMYqTjzT1AZagonmmMSF40uEqfzSRhiLEOq4-_M", http_request_error; e_clientaddr="AcJorpJTwANQ9fQAPwyKXXN0WSjpV5Hbrj8FXm5hKjSVOQ-mGn2easUJ5DVK5kxUNv6VUvl_61jlTADwOg"; e_fb_vipport="AcJIJB0sLXUxgBtcojiF2_VdR_wj7uFpqy2MRmUxI-sfJojbwQACzCLCByf0"; e_upip="AcLC8FBfXSfxClvstDEU-fRbSFQJ9jhfDKotgG8pk5_Kd9FjcYNG_8GvvsUJyfahUDhRDniyCJAT-l5lmSmMT2CI4x5WicgmcQ"; e_fb_hostheader="AcKxeafyx8F_I3Yg3h9sLkEHrt9n7RdiKok_aDJxfgM56jHwQuwma3hAVDd5b4zBsBh1FmNluYlvRRaG"; e_fb_vipaddr="AcJQsjOkq1siJsymCnLwg9vOSVFLPJIW6knFsgyXTiaT-R6gX240E0OYtazKUHUh5cfSMQ"; e_fb_requesthandler="AcIbkw7LWZ7tB0W-ahWKfVEcErOMWTWOy-iT3MHo79VyaVAx5FZujYPd1OTnFndHC77FSMJGoQU"; e_fb_builduser="AcLUK4tc-YMToLyl26gzkWYxww_52_hU0-JeZ4WLBzn5GNBVUeEb68HYdQON1iORGeA"; e_fb_binaryversion="AcJuyxBYohRCKRa0volVNjpE2ZDK_-de5J6LYokLb5I0_GcGOsreldC7Y-VdPHdIihnYH9xLMNIPp7sCFcTUJHQmsNEZgPbkbpc"; e_proxy="AcIsHMRzaVgRZNfwOhpJNpaTl3uKVwa2k3RW7k3H0zef5qqPdS0sBvySC-gZjBnDxiw42bcjL3HGxCw"',
          'alt-svc': 'h3=":443"; ma=86400',
          connection: 'keep-alive',
          'content-length': '273'
        },
        config: {
          transitional: {
            silentJSONParsing: true,
            forcedJSONParsing: true,
            clarifyTimeoutError: false
          },
          adapter: [ 'xhr', 'http' ],
          transformRequest: [ [Function: transformRequest] ],
          transformResponse: [ [Function: transformResponse] ],
          timeout: 0,
          xsrfCookieName: 'XSRF-TOKEN',
          xsrfHeaderName: 'X-XSRF-TOKEN',
          maxContentLength: -1,
          maxBodyLength: -1,
          env: {
            FormData: [Function: FormData] {
              LINE_BREAK: '\r\n',
              DEFAULT_CONTENT_TYPE: 'application/octet-stream'
            },
            Blob: [class Blob]
          },
          validateStatus: [Function: validateStatus],
          headers: AxiosHeaders {
            Accept: 'application/json, text/plain, */*',
            'User-Agent': 'axios/1.4.0',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          method: 'delete',
          url: 'https://graph.facebook.com/v16.0/112768655243132_193549723829605?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
          data: undefined
        },
        request: <ref *3> ClientRequest {
          _events: [Object: null prototype] {
            abort: [Function (anonymous)],
            aborted: [Function (anonymous)],
            connect: [Function (anonymous)],
            error: [Function (anonymous)],
            socket: [Function (anonymous)],
            timeout: [Function (anonymous)],
            finish: [Function: requestOnFinish]
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          outputData: [],
          outputSize: 0,
          writable: true,
          destroyed: true,
          _last: true,
          chunkedEncoding: false,
          shouldKeepAlive: true,
          maxRequestsOnConnectionReached: false,
          _defaultKeepAlive: true,
          useChunkedEncodingByDefault: false,
          sendDate: false,
          _removedConnection: false,
          _removedContLen: false,
          _removedTE: false,
          strictContentLength: false,
          _contentLength: 0,
          _hasBody: true,
          _trailer: '',
          finished: true,
          _headerSent: true,
          _closed: true,
          socket: <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: <Buffer 30 82 07 9e 02 01 01 02 02 03 04 04 02 13 03 04 20 c0 b7 b3 43 4c 5f 88 6d f2 0d df b6 9e f5 2f 4a 37 6e 7b ee e2 c0 27 2e 1f e1 40 73 ed a0 6a cf 04 ... 1904 more bytes>,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'graph.facebook.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: bound onceWrapper] {
                listener: [Function: freeSocketErrorListener]
              }
            },
            _eventsCount: 9,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'graph.facebook.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              awaitDrainWriters: null,
              [Symbol(kState)]: 60035160
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              highWaterMark: 16384,
              length: 0,
              corked: 0,
              onwrite: [Function: bound onwrite],
              writelen: 0,
              bufferedIndex: 0,
              pendingcb: 0,
              [Symbol(kState)]: 34340932,
              [Symbol(kBufferedValue)]: null,
              [Symbol(kWriteCbValue)]: [Function: bound onFinish]
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: null,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: true,
            timeout: 5000,
            parser: null,
            _httpMessage: null,
            [Symbol(alpncallback)]: null,
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: null,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: -1,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: null,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: Timeout {
              _idleTimeout: 5000,
              _idlePrev: [TimersList],
              _idleNext: [Timeout],
              _idleStart: 149677,
              _onTimeout: [Function: bound ],
              _timerArgs: undefined,
              _repeat: null,
              _destroyed: false,
              [Symbol(refed)]: false,
              [Symbol(kHasPrimitive)]: false,
              [Symbol(asyncId)]: 2850,
              [Symbol(triggerId)]: 2848
            },
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 1,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              session: <Buffer 30 82 07 9e 02 01 01 02 02 03 04 04 02 13 03 04 20 c0 b7 b3 43 4c 5f 88 6d f2 0d df b6 9e f5 2f 4a 37 6e 7b ee e2 c0 27 2e 1f e1 40 73 ed a0 6a cf 04 ... 1904 more bytes>,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'DELETE',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'User-Agent': 'axios/1.4.0',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              family: undefined,
              lookup: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'graph.facebook.com',
              port: 443,
              agent: undefined,
              nativeProtocols: <ref *4> {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *2> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      keepAlive: true,
                      scheduling: 'lifo',
                      timeout: 5000,
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {},
                    freeSockets: [Object: null prototype] {
                      'graph.facebook.com:443:::::::::::::::::::::': [ [Circular *1] ]
                    },
                    keepAliveMsecs: 1000,
                    keepAlive: true,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'graph.facebook.com:443:::::::::::::::::::::': <Buffer 30 82 07 9f 02 01 01 02 02 03 04 04 02 13 03 04 20 27 c5 8c 2e 19 f3 05 ac 16 2c 2e e7 a4 47 01 f5 5a eb 56 4b 24 20 5b 84 3d 7a 96 b1 04 3d 0d 0e 04 ... 1905 more bytes>
                      },
                      list: [ 'graph.facebook.com:443:::::::::::::::::::::' ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/v16.0/112768655243132_193549723829605',
              search: '?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
              _defaultAgent: <ref *2> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] {
                  keepAlive: true,
                  scheduling: 'lifo',
                  timeout: 5000,
                  noDelay: true,
                  path: null
                },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {
                  'graph.facebook.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                keepAliveMsecs: 1000,
                keepAlive: true,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'graph.facebook.com:443:::::::::::::::::::::': <Buffer 30 82 07 9f 02 01 01 02 02 03 04 04 02 13 03 04 20 27 c5 8c 2e 19 f3 05 ac 16 2c 2e e7 a4 47 01 f5 5a eb 56 4b 24 20 5b 84 3d 7a 96 b1 04 3d 0d 0e 04 ... 1905 more bytes>
                  },
                  list: [ 'graph.facebook.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'graph.facebook.com',
              keepAlive: true,
              scheduling: 'lifo',
              timeout: 5000,
              noDelay: true,
              servername: 'graph.facebook.com',
              _agentKey: 'graph.facebook.com:443:::::::::::::::::::::',
              encoding: null,
              keepAliveInitialDelay: 1000
            }
          },
          _header: 'DELETE /v16.0/112768655243132_193549723829605?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD HTTP/1.1\r\n' +
            'Accept: application/json, text/plain, */*\r\n' +
            'User-Agent: axios/1.4.0\r\n' +
            'Accept-Encoding: gzip, compress, deflate, br\r\n' +
            'Host: graph.facebook.com\r\n' +
            'Connection: keep-alive\r\n' +
            '\r\n',
          _keepAliveTimeout: 0,
          _onPendingData: [Function: nop],
          agent: <ref *2> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] {
              keepAlive: true,
              scheduling: 'lifo',
              timeout: 5000,
              noDelay: true,
              path: null
            },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {},
            freeSockets: [Object: null prototype] {
              'graph.facebook.com:443:::::::::::::::::::::': [
                <ref *1> TLSSocket {
                  _tlsOptions: {
                    allowHalfOpen: undefined,
                    pipe: false,
                    secureContext: SecureContext { context: SecureContext {} },
                    isServer: false,
                    requestCert: true,
                    rejectUnauthorized: true,
                    session: <Buffer 30 82 07 9e 02 01 01 02 02 03 04 04 02 13 03 04 20 c0 b7 b3 43 4c 5f 88 6d f2 0d df b6 9e f5 2f 4a 37 6e 7b ee e2 c0 27 2e 1f e1 40 73 ed a0 6a cf 04 ... 1904 more bytes>,
                    ALPNProtocols: undefined,
                    requestOCSP: undefined,
                    enableTrace: undefined,
                    pskCallback: undefined,
                    highWaterMark: undefined,
                    onread: undefined,
                    signal: undefined
                  },
                  _secureEstablished: true,
                  _securePending: false,
                  _newSessionPending: false,
                  _controlReleased: true,
                  secureConnecting: false,
                  _SNICallback: null,
                  servername: 'graph.facebook.com',
                  alpnProtocol: false,
                  authorized: true,
                  authorizationError: null,
                  encrypted: true,
                  _events: [Object: null prototype] {
                    close: [
                      [Function: onSocketCloseDestroySSL],
                      [Function: bound onceWrapper] {
                        listener: [Function (anonymous)]
                      },
                      [Function: onClose]
                    ],
                    end: [Function: onReadableStreamEnd],
                    newListener: [Function: keylogNewListener],
                    secure: [Function: onConnectSecure],
                    session: [Function (anonymous)],
                    free: [Function: onFree],
                    timeout: [Function: onTimeout],
                    agentRemove: [Function: onRemove],
                    error: [Function: bound onceWrapper] {
                      listener: [Function: freeSocketErrorListener]
                    }
                  },
                  _eventsCount: 9,
                  connecting: false,
                  _hadError: false,
                  _parent: null,
                  _host: 'graph.facebook.com',
                  _closeAfterHandlingError: false,
                  _readableState: ReadableState {
                    highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: [],
                    awaitDrainWriters: null,
                    [Symbol(kState)]: 60035160
                  },
                  _maxListeners: undefined,
                  _writableState: WritableState {
                    highWaterMark: 16384,
                    length: 0,
                    corked: 0,
                    onwrite: [Function: bound onwrite],
                    writelen: 0,
                    bufferedIndex: 0,
                    pendingcb: 0,
                    [Symbol(kState)]: 34340932,
                    [Symbol(kBufferedValue)]: null,
                    [Symbol(kWriteCbValue)]: [Function: bound onFinish]
                  },
                  allowHalfOpen: false,
                  _sockname: null,
                  _pendingData: null,
                  _pendingEncoding: '',
                  server: undefined,
                  _server: null,
                  ssl: TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _parentWrap: null,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _requestCert: true,
                  _rejectUnauthorized: true,
                  timeout: 5000,
                  parser: null,
                  _httpMessage: null,
                  [Symbol(alpncallback)]: null,
                  [Symbol(res)]: TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _parentWrap: null,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  [Symbol(verified)]: true,
                  [Symbol(pendingSession)]: null,
                  [Symbol(async_id_symbol)]: -1,
                  [Symbol(kHandle)]: TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _parentWrap: null,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  [Symbol(lastWriteQueueSize)]: 0,
                  [Symbol(timeout)]: Timeout {
                    _idleTimeout: 5000,
                    _idlePrev: [TimersList],
                    _idleNext: [Timeout],
                    _idleStart: 149677,
                    _onTimeout: [Function: bound ],
                    _timerArgs: undefined,
                    _repeat: null,
                    _destroyed: false,
                    [Symbol(refed)]: false,
                    [Symbol(kHasPrimitive)]: false,
                    [Symbol(asyncId)]: 2850,
                    [Symbol(triggerId)]: 2848
                  },
                  [Symbol(kBuffer)]: null,
                  [Symbol(kBufferCb)]: null,
                  [Symbol(kBufferGen)]: null,
                  [Symbol(kCapture)]: false,
                  [Symbol(kSetNoDelay)]: false,
                  [Symbol(kSetKeepAlive)]: true,
                  [Symbol(kSetKeepAliveInitialDelay)]: 1,
                  [Symbol(kBytesRead)]: 0,
                  [Symbol(kBytesWritten)]: 0,
                  [Symbol(connect-options)]: {
                    rejectUnauthorized: true,
                    ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                    checkServerIdentity: [Function: checkServerIdentity],
                    minDHSize: 1024,
                    session: <Buffer 30 82 07 9e 02 01 01 02 02 03 04 04 02 13 03 04 20 c0 b7 b3 43 4c 5f 88 6d f2 0d df b6 9e f5 2f 4a 37 6e 7b ee e2 c0 27 2e 1f e1 40 73 ed a0 6a cf 04 ... 1904 more bytes>,
                    maxRedirects: 21,
                    maxBodyLength: Infinity,
                    protocol: 'https:',
                    path: null,
                    method: 'DELETE',
                    headers: [Object: null prototype] {
                      Accept: 'application/json, text/plain, */*',
                      'User-Agent': 'axios/1.4.0',
                      'Accept-Encoding': 'gzip, compress, deflate, br'
                    },
                    agents: { http: undefined, https: undefined },
                    auth: undefined,
                    family: undefined,
                    lookup: undefined,
                    beforeRedirect: [Function: dispatchBeforeRedirect],
                    beforeRedirects: { proxy: [Function: beforeRedirect] },
                    hostname: 'graph.facebook.com',
                    port: 443,
                    agent: undefined,
                    nativeProtocols: <ref *4> {
                      'http:': {
                        _connectionListener: [Function: connectionListener],
                        METHODS: [
                          'ACL',         'BIND',       'CHECKOUT',
                          'CONNECT',     'COPY',       'DELETE',
                          'GET',         'HEAD',       'LINK',
                          'LOCK',        'M-SEARCH',   'MERGE',
                          'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                          'MOVE',        'NOTIFY',     'OPTIONS',
                          'PATCH',       'POST',       'PROPFIND',
                          'PROPPATCH',   'PURGE',      'PUT',
                          'REBIND',      'REPORT',     'SEARCH',
                          'SOURCE',      'SUBSCRIBE',  'TRACE',
                          'UNBIND',      'UNLINK',     'UNLOCK',
                          'UNSUBSCRIBE'
                        ],
                        STATUS_CODES: {
                          '100': 'Continue',
                          '101': 'Switching Protocols',
                          '102': 'Processing',
                          '103': 'Early Hints',
                          '200': 'OK',
                          '201': 'Created',
                          '202': 'Accepted',
                          '203': 'Non-Authoritative Information',
                          '204': 'No Content',
                          '205': 'Reset Content',
                          '206': 'Partial Content',
                          '207': 'Multi-Status',
                          '208': 'Already Reported',
                          '226': 'IM Used',
                          '300': 'Multiple Choices',
                          '301': 'Moved Permanently',
                          '302': 'Found',
                          '303': 'See Other',
                          '304': 'Not Modified',
                          '305': 'Use Proxy',
                          '307': 'Temporary Redirect',
                          '308': 'Permanent Redirect',
                          '400': 'Bad Request',
                          '401': 'Unauthorized',
                          '402': 'Payment Required',
                          '403': 'Forbidden',
                          '404': 'Not Found',
                          '405': 'Method Not Allowed',
                          '406': 'Not Acceptable',
                          '407': 'Proxy Authentication Required',
                          '408': 'Request Timeout',
                          '409': 'Conflict',
                          '410': 'Gone',
                          '411': 'Length Required',
                          '412': 'Precondition Failed',
                          '413': 'Payload Too Large',
                          '414': 'URI Too Long',
                          '415': 'Unsupported Media Type',
                          '416': 'Range Not Satisfiable',
                          '417': 'Expectation Failed',
                          '418': "I'm a Teapot",
                          '421': 'Misdirected Request',
                          '422': 'Unprocessable Entity',
                          '423': 'Locked',
                          '424': 'Failed Dependency',
                          '425': 'Too Early',
                          '426': 'Upgrade Required',
                          '428': 'Precondition Required',
                          '429': 'Too Many Requests',
                          '431': 'Request Header Fields Too Large',
                          '451': 'Unavailable For Legal Reasons',
                          '500': 'Internal Server Error',
                          '501': 'Not Implemented',
                          '502': 'Bad Gateway',
                          '503': 'Service Unavailable',
                          '504': 'Gateway Timeout',
                          '505': 'HTTP Version Not Supported',
                          '506': 'Variant Also Negotiates',
                          '507': 'Insufficient Storage',
                          '508': 'Loop Detected',
                          '509': 'Bandwidth Limit Exceeded',
                          '510': 'Not Extended',
                          '511': 'Network Authentication Required'
                        },
                        Agent: [Function: Agent] {
                          defaultMaxSockets: Infinity
                        },
                        ClientRequest: [Function: ClientRequest],
                        IncomingMessage: [Function: IncomingMessage],
                        OutgoingMessage: [Function: OutgoingMessage],
                        Server: [Function: Server],
                        ServerResponse: [Function: ServerResponse],
                        createServer: [Function: createServer],
                        validateHeaderName: [Function: __node_internal_],
                        validateHeaderValue: [Function: __node_internal_],
                        get: [Function: get],
                        request: [Function: request],
                        setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                        maxHeaderSize: [Getter],
                        globalAgent: [Getter/Setter]
                      },
                      'https:': {
                        Agent: [Function: Agent],
                        globalAgent: [Circular *2],
                        Server: [Function: Server],
                        createServer: [Function: createServer],
                        get: [Function: get],
                        request: [Function: request]
                      }
                    },
                    pathname: '/v16.0/112768655243132_193549723829605',
                    search: '?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
                    _defaultAgent: [Circular *2],
                    host: 'graph.facebook.com',
                    keepAlive: true,
                    scheduling: 'lifo',
                    timeout: 5000,
                    noDelay: true,
                    servername: 'graph.facebook.com',
                    _agentKey: 'graph.facebook.com:443:::::::::::::::::::::',
                    encoding: null,
                    keepAliveInitialDelay: 1000
                  }
                }
              ]
            },
            keepAliveMsecs: 1000,
            keepAlive: true,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'graph.facebook.com:443:::::::::::::::::::::': <Buffer 30 82 07 9f 02 01 01 02 02 03 04 04 02 13 03 04 20 27 c5 8c 2e 19 f3 05 ac 16 2c 2e e7 a4 47 01 f5 5a eb 56 4b 24 20 5b 84 3d 7a 96 b1 04 3d 0d 0e 04 ... 1905 more bytes>
              },
              list: [ 'graph.facebook.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          socketPath: undefined,
          method: 'DELETE',
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          joinDuplicateHeaders: undefined,
          path: '/v16.0/112768655243132_193549723829605?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
          _ended: true,
          res: IncomingMessage {
            _readableState: ReadableState {
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              awaitDrainWriters: null,
              [Symbol(kState)]: 110426134
            },
            _events: [Object: null prototype] {
              end: [
                [Function: responseOnEnd],
                [Function: onend],
                [Function: onend]
              ],
              close: [
                [Function (anonymous)],
                [Function: onclose],
                [Function: onclose]
              ],
              finish: [ [Function: onfinish], [Function: onfinish] ],
              error: [
                [Function: onerror],
                [Function: onError],
                [Function: onerror]
              ]
            },
            _eventsCount: 4,
            _maxListeners: undefined,
            socket: null,
            httpVersionMajor: 1,
            httpVersionMinor: 1,
            httpVersion: '1.1',
            complete: true,
            rawHeaders: [
              'Content-Encoding',
              'br',
              'Vary',
              'Origin',
              'Vary',
              'Accept-Encoding',
              'Access-Control-Allow-Origin',
              '*',
              'cross-origin-resource-policy',
              'cross-origin',
              'x-app-usage',
              '{"call_count":0,"total_cputime":0,"total_time":0}',
              'Content-Type',
              'application/json',
              'WWW-Authenticate',
              `OAuth "Facebook Platform" "invalid_request" "Unsupported delete request. Object with ID '112768655243132_193549723829605' does not exist, cannot be loaded due to missing permissions, or does not support this operation. Please read the Graph API documentation at https://developers.facebook.com/docs/graph-api"`,
              'facebook-api-version',
              'v16.0',
              'Strict-Transport-Security',
              'max-age=15552000; preload',
              'Pragma',
              'no-cache',
              'Cache-Control',
              'no-store',
              'Expires',
              'Sat, 01 Jan 2000 00:00:00 GMT',
              'x-fb-request-id',
              'AXg29N7JOYf5fn9DqfC5no6',
              'x-fb-trace-id',
              'FEfyeNJBy6D',
              'x-fb-rev',
              '1010465578',
              'X-FB-Debug',
              '21S05mPCPDVKBwA9SQo7zlRO3fkjuAOA4agEeUrfOeDn+3BMG3ZF1naLHaWVZMVgGKpPyGVlHvjDCEvUTTqi9w==',
              'Date',
              'Sat, 16 Dec 2023 11:17:49 GMT',
              'Proxy-Status',
              'http_request_error; e_clientaddr="AcIxCLXLRrRWsquLdE4yyhZiV2t_BNLrfMOgIqHVXuxtaorMBEDQir6T-0QR08_GVVhbDmln8JLOg_nLg8VLFdFSKTJrkaMU4bpdzClcnHEg-Xs"; e_fb_vipport="AcLdzP7uF7giW-nGbgsy7SYrmXI_1lrbxZ9pMOWmFSIn-Hr8qgXsbMn91Cac"; e_upip="AcI9I1igR5TfhoobpOVfPrLbtZKNSnDRhsPQJxHnuPj43L-uDVnaM-obSzHRq-N_19I9sPmiWwhIiZeUxTZz4YuOqba_2511G7w"; e_fb_hostheader="AcIjCxHhbF3PakRqnI0j4qLHu5d5r8QdI4X26a-SLtCPX5Fha0xRHocj9O_AgXM37aHd70xRmPVvjjDC"; e_fb_vipaddr="AcLBSCgz4GthNoZBl-0DOVR--1bEYmLfiGgTk4Ep3EdYRBj9zOnJ1t5T8VQevXrn4q0LWC5YoHQ3W_gQBY7BPgd-jKSW01pk5w"; e_fb_requesthandler="AcL7Xrldjve0jylQLNhNglkd0-WddDTJ0XwY1eKKn2y34imKUetOB9vfxKaQaKbKeqfwYBVxg8U"; e_fb_builduser="AcIKObLy9l2mhPDX7li2wo5kK1FkbzpfNwy-n9TZ8vJWn5fyiE2kJLp_PhwsHLTE3ZU"; e_fb_binaryversion="AcJHqopxypL2Y_LxFyyeQCKOe9XWW_UOYnkW4NIasd9P3XRvvcoQtpwaHLW52rLgO_yMOwr6hi2hM6QA26Lgmz40oZh_WUEY4M4"; e_proxy="AcLia5QvImxwXFjTPhawke2PnrMy0YalcgBsKHpgq4uHeMYqTjzT1AZagonmmMSF40uEqfzSRhiLEOq4-_M", http_request_error; e_clientaddr="AcJorpJTwANQ9fQAPwyKXXN0WSjpV5Hbrj8FXm5hKjSVOQ-mGn2easUJ5DVK5kxUNv6VUvl_61jlTADwOg"; e_fb_vipport="AcJIJB0sLXUxgBtcojiF2_VdR_wj7uFpqy2MRmUxI-sfJojbwQACzCLCByf0"; e_upip="AcLC8FBfXSfxClvstDEU-fRbSFQJ9jhfDKotgG8pk5_Kd9FjcYNG_8GvvsUJyfahUDhRDniyCJAT-l5lmSmMT2CI4x5WicgmcQ"; e_fb_hostheader="AcKxeafyx8F_I3Yg3h9sLkEHrt9n7RdiKok_aDJxfgM56jHwQuwma3hAVDd5b4zBsBh1FmNluYlvRRaG"; e_fb_vipaddr="AcJQsjOkq1siJsymCnLwg9vOSVFLPJIW6knFsgyXTiaT-R6gX240E0OYtazKUHUh5cfSMQ"; e_fb_requesthandler="AcIbkw7LWZ7tB0W-ahWKfVEcErOMWTWOy-iT3MHo79VyaVAx5FZujYPd1OTnFndHC77FSMJGoQU"; e_fb_builduser="AcLUK4tc-YMToLyl26gzkWYxww_52_hU0-JeZ4WLBzn5GNBVUeEb68HYdQON1iORGeA"; e_fb_binaryversion="AcJuyxBYohRCKRa0volVNjpE2ZDK_-de5J6LYokLb5I0_GcGOsreldC7Y-VdPHdIihnYH9xLMNIPp7sCFcTUJHQmsNEZgPbkbpc"; e_proxy="AcIsHMRzaVgRZNfwOhpJNpaTl3uKVwa2k3RW7k3H0zef5qqPdS0sBvySC-gZjBnDxiw42bcjL3HGxCw"',
              'Alt-Svc',
              'h3=":443"; ma=86400',
              'Connection',
              'keep-alive',
              'Content-Length',
              '273'
            ],
            rawTrailers: [],
            joinDuplicateHeaders: undefined,
            aborted: false,
            upgrade: false,
            url: '',
            method: null,
            statusCode: 400,
            statusMessage: 'Bad Request',
            client: <ref *1> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: <Buffer 30 82 07 9e 02 01 01 02 02 03 04 04 02 13 03 04 20 c0 b7 b3 43 4c 5f 88 6d f2 0d df b6 9e f5 2f 4a 37 6e 7b ee e2 c0 27 2e 1f e1 40 73 ed a0 6a cf 04 ... 1904 more bytes>,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'graph.facebook.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: bound onceWrapper] {
                  listener: [Function: freeSocketErrorListener]
                }
              },
              _eventsCount: 9,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'graph.facebook.com',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                awaitDrainWriters: null,
                [Symbol(kState)]: 60035160
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                highWaterMark: 16384,
                length: 0,
                corked: 0,
                onwrite: [Function: bound onwrite],
                writelen: 0,
                bufferedIndex: 0,
                pendingcb: 0,
                [Symbol(kState)]: 34340932,
                [Symbol(kBufferedValue)]: null,
                [Symbol(kWriteCbValue)]: [Function: bound onFinish]
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: null,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _requestCert: true,
              _rejectUnauthorized: true,
              timeout: 5000,
              parser: null,
              _httpMessage: null,
              [Symbol(alpncallback)]: null,
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: null,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: -1,
              [Symbol(kHandle)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: null,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: Timeout {
                _idleTimeout: 5000,
                _idlePrev: [TimersList],
                _idleNext: [Timeout],
                _idleStart: 149677,
                _onTimeout: [Function: bound ],
                _timerArgs: undefined,
                _repeat: null,
                _destroyed: false,
                [Symbol(refed)]: false,
                [Symbol(kHasPrimitive)]: false,
                [Symbol(asyncId)]: 2850,
                [Symbol(triggerId)]: 2848
              },
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 1,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                session: <Buffer 30 82 07 9e 02 01 01 02 02 03 04 04 02 13 03 04 20 c0 b7 b3 43 4c 5f 88 6d f2 0d df b6 9e f5 2f 4a 37 6e 7b ee e2 c0 27 2e 1f e1 40 73 ed a0 6a cf 04 ... 1904 more bytes>,
                maxRedirects: 21,
                maxBodyLength: Infinity,
                protocol: 'https:',
                path: null,
                method: 'DELETE',
                headers: [Object: null prototype] {
                  Accept: 'application/json, text/plain, */*',
                  'User-Agent': 'axios/1.4.0',
                  'Accept-Encoding': 'gzip, compress, deflate, br'
                },
                agents: { http: undefined, https: undefined },
                auth: undefined,
                family: undefined,
                lookup: undefined,
                beforeRedirect: [Function: dispatchBeforeRedirect],
                beforeRedirects: { proxy: [Function: beforeRedirect] },
                hostname: 'graph.facebook.com',
                port: 443,
                agent: undefined,
                nativeProtocols: <ref *4> {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: <ref *2> Agent {
                      _events: [Object: null prototype] {
                        free: [Function (anonymous)],
                        newListener: [Function: maybeEnableKeylog]
                      },
                      _eventsCount: 2,
                      _maxListeners: undefined,
                      defaultPort: 443,
                      protocol: 'https:',
                      options: [Object: null prototype] {
                        keepAlive: true,
                        scheduling: 'lifo',
                        timeout: 5000,
                        noDelay: true,
                        path: null
                      },
                      requests: [Object: null prototype] {},
                      sockets: [Object: null prototype] {},
                      freeSockets: [Object: null prototype] {
                        'graph.facebook.com:443:::::::::::::::::::::': [ [Circular *1] ]
                      },
                      keepAliveMsecs: 1000,
                      keepAlive: true,
                      maxSockets: Infinity,
                      maxFreeSockets: 256,
                      scheduling: 'lifo',
                      maxTotalSockets: Infinity,
                      totalSocketCount: 1,
                      maxCachedSessions: 100,
                      _sessionCache: {
                        map: {
                          'graph.facebook.com:443:::::::::::::::::::::': <Buffer 30 82 07 9f 02 01 01 02 02 03 04 04 02 13 03 04 20 27 c5 8c 2e 19 f3 05 ac 16 2c 2e e7 a4 47 01 f5 5a eb 56 4b 24 20 5b 84 3d 7a 96 b1 04 3d 0d 0e 04 ... 1905 more bytes>
                        },
                        list: [
                          'graph.facebook.com:443:::::::::::::::::::::'
                        ]
                      },
                      [Symbol(kCapture)]: false
                    },
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/v16.0/112768655243132_193549723829605',
                search: '?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
                _defaultAgent: <ref *2> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    keepAlive: true,
                    scheduling: 'lifo',
                    timeout: 5000,
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {},
                  freeSockets: [Object: null prototype] {
                    'graph.facebook.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  keepAliveMsecs: 1000,
                  keepAlive: true,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'graph.facebook.com:443:::::::::::::::::::::': <Buffer 30 82 07 9f 02 01 01 02 02 03 04 04 02 13 03 04 20 27 c5 8c 2e 19 f3 05 ac 16 2c 2e e7 a4 47 01 f5 5a eb 56 4b 24 20 5b 84 3d 7a 96 b1 04 3d 0d 0e 04 ... 1905 more bytes>
                    },
                    list: [ 'graph.facebook.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                host: 'graph.facebook.com',
                keepAlive: true,
                scheduling: 'lifo',
                timeout: 5000,
                noDelay: true,
                servername: 'graph.facebook.com',
                _agentKey: 'graph.facebook.com:443:::::::::::::::::::::',
                encoding: null,
                keepAliveInitialDelay: 1000
              }
            },
            _consuming: true,
            _dumped: false,
            req: [Circular *3],
            responseUrl: 'https://graph.facebook.com/v16.0/112768655243132_193549723829605?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
            redirects: [],
            [Symbol(kCapture)]: false,
            [Symbol(kHeaders)]: {
              vary: 'Origin, Accept-Encoding',
              'access-control-allow-origin': '*',
              'cross-origin-resource-policy': 'cross-origin',
              'x-app-usage': '{"call_count":0,"total_cputime":0,"total_time":0}',
              'content-type': 'application/json',
              'www-authenticate': `OAuth "Facebook Platform" "invalid_request" "Unsupported delete request. Object with ID '112768655243132_193549723829605' does not exist, cannot be loaded due to missing permissions, or does not support this operation. Please read the Graph API documentation at https://developers.facebook.com/docs/graph-api"`,
              'facebook-api-version': 'v16.0',
              'strict-transport-security': 'max-age=15552000; preload',
              pragma: 'no-cache',
              'cache-control': 'no-store',
              expires: 'Sat, 01 Jan 2000 00:00:00 GMT',
              'x-fb-request-id': 'AXg29N7JOYf5fn9DqfC5no6',
              'x-fb-trace-id': 'FEfyeNJBy6D',
              'x-fb-rev': '1010465578',
              'x-fb-debug': '21S05mPCPDVKBwA9SQo7zlRO3fkjuAOA4agEeUrfOeDn+3BMG3ZF1naLHaWVZMVgGKpPyGVlHvjDCEvUTTqi9w==',
              date: 'Sat, 16 Dec 2023 11:17:49 GMT',
              'proxy-status': 'http_request_error; e_clientaddr="AcIxCLXLRrRWsquLdE4yyhZiV2t_BNLrfMOgIqHVXuxtaorMBEDQir6T-0QR08_GVVhbDmln8JLOg_nLg8VLFdFSKTJrkaMU4bpdzClcnHEg-Xs"; e_fb_vipport="AcLdzP7uF7giW-nGbgsy7SYrmXI_1lrbxZ9pMOWmFSIn-Hr8qgXsbMn91Cac"; e_upip="AcI9I1igR5TfhoobpOVfPrLbtZKNSnDRhsPQJxHnuPj43L-uDVnaM-obSzHRq-N_19I9sPmiWwhIiZeUxTZz4YuOqba_2511G7w"; e_fb_hostheader="AcIjCxHhbF3PakRqnI0j4qLHu5d5r8QdI4X26a-SLtCPX5Fha0xRHocj9O_AgXM37aHd70xRmPVvjjDC"; e_fb_vipaddr="AcLBSCgz4GthNoZBl-0DOVR--1bEYmLfiGgTk4Ep3EdYRBj9zOnJ1t5T8VQevXrn4q0LWC5YoHQ3W_gQBY7BPgd-jKSW01pk5w"; e_fb_requesthandler="AcL7Xrldjve0jylQLNhNglkd0-WddDTJ0XwY1eKKn2y34imKUetOB9vfxKaQaKbKeqfwYBVxg8U"; e_fb_builduser="AcIKObLy9l2mhPDX7li2wo5kK1FkbzpfNwy-n9TZ8vJWn5fyiE2kJLp_PhwsHLTE3ZU"; e_fb_binaryversion="AcJHqopxypL2Y_LxFyyeQCKOe9XWW_UOYnkW4NIasd9P3XRvvcoQtpwaHLW52rLgO_yMOwr6hi2hM6QA26Lgmz40oZh_WUEY4M4"; e_proxy="AcLia5QvImxwXFjTPhawke2PnrMy0YalcgBsKHpgq4uHeMYqTjzT1AZagonmmMSF40uEqfzSRhiLEOq4-_M", http_request_error; e_clientaddr="AcJorpJTwANQ9fQAPwyKXXN0WSjpV5Hbrj8FXm5hKjSVOQ-mGn2easUJ5DVK5kxUNv6VUvl_61jlTADwOg"; e_fb_vipport="AcJIJB0sLXUxgBtcojiF2_VdR_wj7uFpqy2MRmUxI-sfJojbwQACzCLCByf0"; e_upip="AcLC8FBfXSfxClvstDEU-fRbSFQJ9jhfDKotgG8pk5_Kd9FjcYNG_8GvvsUJyfahUDhRDniyCJAT-l5lmSmMT2CI4x5WicgmcQ"; e_fb_hostheader="AcKxeafyx8F_I3Yg3h9sLkEHrt9n7RdiKok_aDJxfgM56jHwQuwma3hAVDd5b4zBsBh1FmNluYlvRRaG"; e_fb_vipaddr="AcJQsjOkq1siJsymCnLwg9vOSVFLPJIW6knFsgyXTiaT-R6gX240E0OYtazKUHUh5cfSMQ"; e_fb_requesthandler="AcIbkw7LWZ7tB0W-ahWKfVEcErOMWTWOy-iT3MHo79VyaVAx5FZujYPd1OTnFndHC77FSMJGoQU"; e_fb_builduser="AcLUK4tc-YMToLyl26gzkWYxww_52_hU0-JeZ4WLBzn5GNBVUeEb68HYdQON1iORGeA"; e_fb_binaryversion="AcJuyxBYohRCKRa0volVNjpE2ZDK_-de5J6LYokLb5I0_GcGOsreldC7Y-VdPHdIihnYH9xLMNIPp7sCFcTUJHQmsNEZgPbkbpc"; e_proxy="AcIsHMRzaVgRZNfwOhpJNpaTl3uKVwa2k3RW7k3H0zef5qqPdS0sBvySC-gZjBnDxiw42bcjL3HGxCw"',
              'alt-svc': 'h3=":443"; ma=86400',
              connection: 'keep-alive',
              'content-length': '273'
            },
            [Symbol(kHeadersCount)]: 44,
            [Symbol(kTrailers)]: null,
            [Symbol(kTrailersCount)]: 0
          },
          aborted: false,
          timeoutCb: null,
          upgradeOrConnect: false,
          parser: null,
          maxHeadersCount: null,
          reusedSocket: false,
          host: 'graph.facebook.com',
          protocol: 'https:',
          _redirectable: Writable {
            _writableState: WritableState {
              highWaterMark: 16384,
              length: 0,
              corked: 0,
              onwrite: [Function: bound onwrite],
              writelen: 0,
              bufferedIndex: 0,
              pendingcb: 0,
              [Symbol(kState)]: 34357356,
              [Symbol(kBufferedValue)]: null
            },
            _events: [Object: null prototype] {
              response: [Function: handleResponse],
              error: [Function: handleRequestError],
              socket: [Function: handleRequestSocket]
            },
            _eventsCount: 3,
            _maxListeners: undefined,
            _options: {
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: '/v16.0/112768655243132_193549723829605?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
              method: 'DELETE',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'User-Agent': 'axios/1.4.0',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              family: undefined,
              lookup: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'graph.facebook.com',
              port: '',
              agent: undefined,
              nativeProtocols: <ref *4> {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *2> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      keepAlive: true,
                      scheduling: 'lifo',
                      timeout: 5000,
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {},
                    freeSockets: [Object: null prototype] {
                      'graph.facebook.com:443:::::::::::::::::::::': [
                        <ref *1> TLSSocket {
                          _tlsOptions: {
                            allowHalfOpen: undefined,
                            pipe: false,
                            secureContext: SecureContext { context: SecureContext {} },
                            isServer: false,
                            requestCert: true,
                            rejectUnauthorized: true,
                            session: <Buffer 30 82 07 9e 02 01 01 02 02 03 04 04 02 13 03 04 20 c0 b7 b3 43 4c 5f 88 6d f2 0d df b6 9e f5 2f 4a 37 6e 7b ee e2 c0 27 2e 1f e1 40 73 ed a0 6a cf 04 ... 1904 more bytes>,
                            ALPNProtocols: undefined,
                            requestOCSP: undefined,
                            enableTrace: undefined,
                            pskCallback: undefined,
                            highWaterMark: undefined,
                            onread: undefined,
                            signal: undefined
                          },
                          _secureEstablished: true,
                          _securePending: false,
                          _newSessionPending: false,
                          _controlReleased: true,
                          secureConnecting: false,
                          _SNICallback: null,
                          servername: 'graph.facebook.com',
                          alpnProtocol: false,
                          authorized: true,
                          authorizationError: null,
                          encrypted: true,
                          _events: [Object: null prototype] {
                            close: [
                              [Function: onSocketCloseDestroySSL],
                              [Function: bound onceWrapper] {
                                listener: [Function (anonymous)]
                              },
                              [Function: onClose]
                            ],
                            end: [Function: onReadableStreamEnd],
                            newListener: [Function: keylogNewListener],
                            secure: [Function: onConnectSecure],
                            session: [Function (anonymous)],
                            free: [Function: onFree],
                            timeout: [Function: onTimeout],
                            agentRemove: [Function: onRemove],
                            error: [Function: bound onceWrapper] {
                              listener: [Function: freeSocketErrorListener]
                            }
                          },
                          _eventsCount: 9,
                          connecting: false,
                          _hadError: false,
                          _parent: null,
                          _host: 'graph.facebook.com',
                          _closeAfterHandlingError: false,
                          _readableState: ReadableState {
                            highWaterMark: 16384,
                            buffer: BufferList { head: null, tail: null, length: 0 },
                            length: 0,
                            pipes: [],
                            awaitDrainWriters: null,
                            [Symbol(kState)]: 60035160
                          },
                          _maxListeners: undefined,
                          _writableState: WritableState {
                            highWaterMark: 16384,
                            length: 0,
                            corked: 0,
                            onwrite: [Function: bound onwrite],
                            writelen: 0,
                            bufferedIndex: 0,
                            pendingcb: 0,
                            [Symbol(kState)]: 34340932,
                            [Symbol(kBufferedValue)]: null,
                            [Symbol(kWriteCbValue)]: [Function: bound onFinish]
                          },
                          allowHalfOpen: false,
                          _sockname: null,
                          _pendingData: null,
                          _pendingEncoding: '',
                          server: undefined,
                          _server: null,
                          ssl: TLSWrap {
                            _parent: TCP {
                              reading: [Getter/Setter],
                              onconnection: null,
                              [Symbol(owner_symbol)]: [Circular *1]
                            },
                            _parentWrap: null,
                            _secureContext: SecureContext { context: SecureContext {} },
                            reading: true,
                            onkeylog: [Function: onkeylog],
                            onhandshakestart: {},
                            onhandshakedone: [Function (anonymous)],
                            onocspresponse: [Function: onocspresponse],
                            onnewsession: [Function: onnewsessionclient],
                            onerror: [Function: onerror],
                            [Symbol(owner_symbol)]: [Circular *1]
                          },
                          _requestCert: true,
                          _rejectUnauthorized: true,
                          timeout: 5000,
                          parser: null,
                          _httpMessage: null,
                          [Symbol(alpncallback)]: null,
                          [Symbol(res)]: TLSWrap {
                            _parent: TCP {
                              reading: [Getter/Setter],
                              onconnection: null,
                              [Symbol(owner_symbol)]: [Circular *1]
                            },
                            _parentWrap: null,
                            _secureContext: SecureContext { context: SecureContext {} },
                            reading: true,
                            onkeylog: [Function: onkeylog],
                            onhandshakestart: {},
                            onhandshakedone: [Function (anonymous)],
                            onocspresponse: [Function: onocspresponse],
                            onnewsession: [Function: onnewsessionclient],
                            onerror: [Function: onerror],
                            [Symbol(owner_symbol)]: [Circular *1]
                          },
                          [Symbol(verified)]: true,
                          [Symbol(pendingSession)]: null,
                          [Symbol(async_id_symbol)]: -1,
                          [Symbol(kHandle)]: TLSWrap {
                            _parent: TCP {
                              reading: [Getter/Setter],
                              onconnection: null,
                              [Symbol(owner_symbol)]: [Circular *1]
                            },
                            _parentWrap: null,
                            _secureContext: SecureContext { context: SecureContext {} },
                            reading: true,
                            onkeylog: [Function: onkeylog],
                            onhandshakestart: {},
                            onhandshakedone: [Function (anonymous)],
                            onocspresponse: [Function: onocspresponse],
                            onnewsession: [Function: onnewsessionclient],
                            onerror: [Function: onerror],
                            [Symbol(owner_symbol)]: [Circular *1]
                          },
                          [Symbol(lastWriteQueueSize)]: 0,
                          [Symbol(timeout)]: Timeout {
                            _idleTimeout: 5000,
                            _idlePrev: [TimersList],
                            _idleNext: [Timeout],
                            _idleStart: 149677,
                            _onTimeout: [Function: bound ],
                            _timerArgs: undefined,
                            _repeat: null,
                            _destroyed: false,
                            [Symbol(refed)]: false,
                            [Symbol(kHasPrimitive)]: false,
                            [Symbol(asyncId)]: 2850,
                            [Symbol(triggerId)]: 2848
                          },
                          [Symbol(kBuffer)]: null,
                          [Symbol(kBufferCb)]: null,
                          [Symbol(kBufferGen)]: null,
                          [Symbol(kCapture)]: false,
                          [Symbol(kSetNoDelay)]: false,
                          [Symbol(kSetKeepAlive)]: true,
                          [Symbol(kSetKeepAliveInitialDelay)]: 1,
                          [Symbol(kBytesRead)]: 0,
                          [Symbol(kBytesWritten)]: 0,
                          [Symbol(connect-options)]: {
                            rejectUnauthorized: true,
                            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                            checkServerIdentity: [Function: checkServerIdentity],
                            minDHSize: 1024,
                            session: <Buffer 30 82 07 9e 02 01 01 02 02 03 04 04 02 13 03 04 20 c0 b7 b3 43 4c 5f 88 6d f2 0d df b6 9e f5 2f 4a 37 6e 7b ee e2 c0 27 2e 1f e1 40 73 ed a0 6a cf 04 ... 1904 more bytes>,
                            maxRedirects: 21,
                            maxBodyLength: Infinity,
                            protocol: 'https:',
                            path: null,
                            method: 'DELETE',
                            headers: [Object: null prototype] {
                              Accept: 'application/json, text/plain, */*',
                              'User-Agent': 'axios/1.4.0',
                              'Accept-Encoding': 'gzip, compress, deflate, br'
                            },
                            agents: { http: undefined, https: undefined },
                            auth: undefined,
                            family: undefined,
                            lookup: undefined,
                            beforeRedirect: [Function: dispatchBeforeRedirect],
                            beforeRedirects: { proxy: [Function: beforeRedirect] },
                            hostname: 'graph.facebook.com',
                            port: 443,
                            agent: undefined,
                            nativeProtocols: [Circular *4],
                            pathname: '/v16.0/112768655243132_193549723829605',
                            search: '?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
                            _defaultAgent: [Circular *2],
                            host: 'graph.facebook.com',
                            keepAlive: true,
                            scheduling: 'lifo',
                            timeout: 5000,
                            noDelay: true,
                            servername: 'graph.facebook.com',
                            _agentKey: 'graph.facebook.com:443:::::::::::::::::::::',
                            encoding: null,
                            keepAliveInitialDelay: 1000
                          }
                        }
                      ]
                    },
                    keepAliveMsecs: 1000,
                    keepAlive: true,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'graph.facebook.com:443:::::::::::::::::::::': <Buffer 30 82 07 9f 02 01 01 02 02 03 04 04 02 13 03 04 20 27 c5 8c 2e 19 f3 05 ac 16 2c 2e e7 a4 47 01 f5 5a eb 56 4b 24 20 5b 84 3d 7a 96 b1 04 3d 0d 0e 04 ... 1905 more bytes>
                      },
                      list: [ 'graph.facebook.com:443:::::::::::::::::::::' ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/v16.0/112768655243132_193549723829605',
              search: '?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD'
            },
            _ended: true,
            _ending: true,
            _redirectCount: 0,
            _redirects: [],
            _requestBodyLength: 0,
            _requestBodyBuffers: [],
            _onNativeResponse: [Function (anonymous)],
            _currentRequest: [Circular *3],
            _currentUrl: 'https://graph.facebook.com/v16.0/112768655243132_193549723829605?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
            [Symbol(kCapture)]: false
          },
          [Symbol(kCapture)]: false,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(kNeedDrain)]: false,
          [Symbol(corked)]: 0,
          [Symbol(kOutHeaders)]: [Object: null prototype] {
            accept: [ 'Accept', 'application/json, text/plain, */*' ],
            'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
            'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
            host: [ 'Host', 'graph.facebook.com' ]
          },
          [Symbol(errored)]: null,
          [Symbol(kHighWaterMark)]: 16384,
          [Symbol(kRejectNonStandardBodyWrites)]: false,
          [Symbol(kUniqueHeaders)]: null
        },
        data: {
          error: {
            message: "Unsupported delete request. Object with ID '112768655243132_193549723829605' does not exist, cannot be loaded due to missing permissions, or does not support this operation. Please read the Graph API documentation at https://developers.facebook.com/docs/graph-api",
            type: 'GraphMethodException',
            code: 100,
            error_subcode: 33,
            fbtrace_id: 'AXg29N7JOYf5fn9DqfC5no6'
          }
        }
      }
    }
  },
  level: 'error'
}
{
  message: {
    function: 'facebookService.deleteFacebookPost',
    error: AxiosError: Request failed with status code 400
        at settle (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\axios\lib\core\settle.js:19:12)
        at BrotliDecompress.handleStreamEnd (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\axios\lib\adapters\http.js:570:11)
        at BrotliDecompress.emit (node:events:526:35)
        at endReadableNT (node:internal/streams/readable:1589:12)
        at processTicksAndRejections (node:internal/process/task_queues:82:21) {
      code: 'ERR_BAD_REQUEST',
      config: {
        transitional: {
          silentJSONParsing: true,
          forcedJSONParsing: true,
          clarifyTimeoutError: false
        },
        adapter: [ 'xhr', 'http' ],
        transformRequest: [ [Function: transformRequest] ],
        transformResponse: [ [Function: transformResponse] ],
        timeout: 0,
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
        maxContentLength: -1,
        maxBodyLength: -1,
        env: {
          FormData: [Function: FormData] {
            LINE_BREAK: '\r\n',
            DEFAULT_CONTENT_TYPE: 'application/octet-stream'
          },
          Blob: [class Blob]
        },
        validateStatus: [Function: validateStatus],
        headers: AxiosHeaders {
          Accept: 'application/json, text/plain, */*',
          'User-Agent': 'axios/1.4.0',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        method: 'delete',
        url: 'https://graph.facebook.com/v16.0/112768655243132_193248887193022?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
        data: undefined
      },
      request: <ref *4> ClientRequest {
        _events: [Object: null prototype] {
          abort: [Function (anonymous)],
          aborted: [Function (anonymous)],
          connect: [Function (anonymous)],
          error: [Function (anonymous)],
          socket: [Function (anonymous)],
          timeout: [Function (anonymous)],
          finish: [Function: requestOnFinish]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: false,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        strictContentLength: false,
        _contentLength: 0,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        _closed: true,
        socket: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: <Buffer 30 82 07 9e 02 01 01 02 02 03 04 04 02 13 03 04 20 c0 b7 b3 43 4c 5f 88 6d f2 0d df b6 9e f5 2f 4a 37 6e 7b ee e2 c0 27 2e 1f e1 40 73 ed a0 6a cf 04 ... 1904 more bytes>,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'graph.facebook.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: bound onceWrapper] {
              listener: [Function: freeSocketErrorListener]
            }
          },
          _eventsCount: 9,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'graph.facebook.com',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            awaitDrainWriters: null,
            [Symbol(kState)]: 60035160
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            highWaterMark: 16384,
            length: 0,
            corked: 0,
            onwrite: [Function: bound onwrite],
            writelen: 0,
            bufferedIndex: 0,
            pendingcb: 0,
            [Symbol(kState)]: 34340932,
            [Symbol(kBufferedValue)]: null,
            [Symbol(kWriteCbValue)]: [Function: bound onFinish]
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: <ref *2> TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: null,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1],
            [Symbol(resource_symbol)]: ReusedHandle { type: 57, handle: [Circular *2] }
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          timeout: 5000,
          parser: null,
          _httpMessage: null,
          [Symbol(alpncallback)]: null,
          [Symbol(res)]: <ref *2> TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: null,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1],
            [Symbol(resource_symbol)]: ReusedHandle { type: 57, handle: [Circular *2] }
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: -1,
          [Symbol(kHandle)]: <ref *2> TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: null,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1],
            [Symbol(resource_symbol)]: ReusedHandle { type: 57, handle: [Circular *2] }
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: Timeout {
            _idleTimeout: 5000,
            _idlePrev: [TimersList],
            _idleNext: [Timeout],
            _idleStart: 152709,
            _onTimeout: [Function: bound ],
            _timerArgs: undefined,
            _repeat: null,
            _destroyed: false,
            [Symbol(refed)]: false,
            [Symbol(kHasPrimitive)]: false,
            [Symbol(asyncId)]: 2986,
            [Symbol(triggerId)]: 2984
          },
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 1,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            session: <Buffer 30 82 07 9e 02 01 01 02 02 03 04 04 02 13 03 04 20 c0 b7 b3 43 4c 5f 88 6d f2 0d df b6 9e f5 2f 4a 37 6e 7b ee e2 c0 27 2e 1f e1 40 73 ed a0 6a cf 04 ... 1904 more bytes>,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'DELETE',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'User-Agent': 'axios/1.4.0',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            lookup: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'graph.facebook.com',
            port: 443,
            agent: undefined,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    keepAlive: true,
                    scheduling: 'lifo',
                    timeout: 5000,
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {},
                  freeSockets: [Object: null prototype] {
                    'graph.facebook.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  keepAliveMsecs: 1000,
                  keepAlive: true,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'graph.facebook.com:443:::::::::::::::::::::': <Buffer 30 82 07 9f 02 01 01 02 02 03 04 04 02 13 03 04 20 27 c5 8c 2e 19 f3 05 ac 16 2c 2e e7 a4 47 01 f5 5a eb 56 4b 24 20 5b 84 3d 7a 96 b1 04 3d 0d 0e 04 ... 1905 more bytes>
                    },
                    list: [ 'graph.facebook.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v16.0/112768655243132_193549723829605',
            search: '?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
            _defaultAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                keepAlive: true,
                scheduling: 'lifo',
                timeout: 5000,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {
                'graph.facebook.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              keepAliveMsecs: 1000,
              keepAlive: true,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'graph.facebook.com:443:::::::::::::::::::::': <Buffer 30 82 07 9f 02 01 01 02 02 03 04 04 02 13 03 04 20 27 c5 8c 2e 19 f3 05 ac 16 2c 2e e7 a4 47 01 f5 5a eb 56 4b 24 20 5b 84 3d 7a 96 b1 04 3d 0d 0e 04 ... 1905 more bytes>
                },
                list: [ 'graph.facebook.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'graph.facebook.com',
            keepAlive: true,
            scheduling: 'lifo',
            timeout: 5000,
            noDelay: true,
            servername: 'graph.facebook.com',
            _agentKey: 'graph.facebook.com:443:::::::::::::::::::::',
            encoding: null,
            keepAliveInitialDelay: 1000
          }
        },
        _header: 'DELETE /v16.0/112768655243132_193248887193022?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'User-Agent: axios/1.4.0\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: graph.facebook.com\r\n' +
          'Connection: keep-alive\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: nop],
        agent: <ref *3> Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] {
            keepAlive: true,
            scheduling: 'lifo',
            timeout: 5000,
            noDelay: true,
            path: null
          },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {},
          freeSockets: [Object: null prototype] {
            'graph.facebook.com:443:::::::::::::::::::::': [
              <ref *1> TLSSocket {
                _tlsOptions: {
                  allowHalfOpen: undefined,
                  pipe: false,
                  secureContext: SecureContext { context: SecureContext {} },
                  isServer: false,
                  requestCert: true,
                  rejectUnauthorized: true,
                  session: <Buffer 30 82 07 9e 02 01 01 02 02 03 04 04 02 13 03 04 20 c0 b7 b3 43 4c 5f 88 6d f2 0d df b6 9e f5 2f 4a 37 6e 7b ee e2 c0 27 2e 1f e1 40 73 ed a0 6a cf 04 ... 1904 more bytes>,
                  ALPNProtocols: undefined,
                  requestOCSP: undefined,
                  enableTrace: undefined,
                  pskCallback: undefined,
                  highWaterMark: undefined,
                  onread: undefined,
                  signal: undefined
                },
                _secureEstablished: true,
                _securePending: false,
                _newSessionPending: false,
                _controlReleased: true,
                secureConnecting: false,
                _SNICallback: null,
                servername: 'graph.facebook.com',
                alpnProtocol: false,
                authorized: true,
                authorizationError: null,
                encrypted: true,
                _events: [Object: null prototype] {
                  close: [
                    [Function: onSocketCloseDestroySSL],
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    [Function: onClose]
                  ],
                  end: [Function: onReadableStreamEnd],
                  newListener: [Function: keylogNewListener],
                  secure: [Function: onConnectSecure],
                  session: [Function (anonymous)],
                  free: [Function: onFree],
                  timeout: [Function: onTimeout],
                  agentRemove: [Function: onRemove],
                  error: [Function: bound onceWrapper] {
                    listener: [Function: freeSocketErrorListener]
                  }
                },
                _eventsCount: 9,
                connecting: false,
                _hadError: false,
                _parent: null,
                _host: 'graph.facebook.com',
                _closeAfterHandlingError: false,
                _readableState: ReadableState {
                  highWaterMark: 16384,
                  buffer: BufferList { head: null, tail: null, length: 0 },
                  length: 0,
                  pipes: [],
                  awaitDrainWriters: null,
                  [Symbol(kState)]: 60035160
                },
                _maxListeners: undefined,
                _writableState: WritableState {
                  highWaterMark: 16384,
                  length: 0,
                  corked: 0,
                  onwrite: [Function: bound onwrite],
                  writelen: 0,
                  bufferedIndex: 0,
                  pendingcb: 0,
                  [Symbol(kState)]: 34340932,
                  [Symbol(kBufferedValue)]: null,
                  [Symbol(kWriteCbValue)]: [Function: bound onFinish]
                },
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: undefined,
                _server: null,
                ssl: <ref *2> TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: null,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1],
                  [Symbol(resource_symbol)]: ReusedHandle { type: 57, handle: [Circular *2] }
                },
                _requestCert: true,
                _rejectUnauthorized: true,
                timeout: 5000,
                parser: null,
                _httpMessage: null,
                [Symbol(alpncallback)]: null,
                [Symbol(res)]: <ref *2> TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: null,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1],
                  [Symbol(resource_symbol)]: ReusedHandle { type: 57, handle: [Circular *2] }
                },
                [Symbol(verified)]: true,
                [Symbol(pendingSession)]: null,
                [Symbol(async_id_symbol)]: -1,
                [Symbol(kHandle)]: <ref *2> TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: null,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1],
                  [Symbol(resource_symbol)]: ReusedHandle { type: 57, handle: [Circular *2] }
                },
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: Timeout {
                  _idleTimeout: 5000,
                  _idlePrev: [TimersList],
                  _idleNext: [Timeout],
                  _idleStart: 152709,
                  _onTimeout: [Function: bound ],
                  _timerArgs: undefined,
                  _repeat: null,
                  _destroyed: false,
                  [Symbol(refed)]: false,
                  [Symbol(kHasPrimitive)]: false,
                  [Symbol(asyncId)]: 2986,
                  [Symbol(triggerId)]: 2984
                },
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: false,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 1,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0,
                [Symbol(connect-options)]: {
                  rejectUnauthorized: true,
                  ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                  checkServerIdentity: [Function: checkServerIdentity],
                  minDHSize: 1024,
                  session: <Buffer 30 82 07 9e 02 01 01 02 02 03 04 04 02 13 03 04 20 c0 b7 b3 43 4c 5f 88 6d f2 0d df b6 9e f5 2f 4a 37 6e 7b ee e2 c0 27 2e 1f e1 40 73 ed a0 6a cf 04 ... 1904 more bytes>,
                  maxRedirects: 21,
                  maxBodyLength: Infinity,
                  protocol: 'https:',
                  path: null,
                  method: 'DELETE',
                  headers: [Object: null prototype] {
                    Accept: 'application/json, text/plain, */*',
                    'User-Agent': 'axios/1.4.0',
                    'Accept-Encoding': 'gzip, compress, deflate, br'
                  },
                  agents: { http: undefined, https: undefined },
                  auth: undefined,
                  family: undefined,
                  lookup: undefined,
                  beforeRedirect: [Function: dispatchBeforeRedirect],
                  beforeRedirects: { proxy: [Function: beforeRedirect] },
                  hostname: 'graph.facebook.com',
                  port: 443,
                  agent: undefined,
                  nativeProtocols: {
                    'http:': {
                      _connectionListener: [Function: connectionListener],
                      METHODS: [
                        'ACL',         'BIND',       'CHECKOUT',
                        'CONNECT',     'COPY',       'DELETE',
                        'GET',         'HEAD',       'LINK',
                        'LOCK',        'M-SEARCH',   'MERGE',
                        'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                        'MOVE',        'NOTIFY',     'OPTIONS',
                        'PATCH',       'POST',       'PROPFIND',
                        'PROPPATCH',   'PURGE',      'PUT',
                        'REBIND',      'REPORT',     'SEARCH',
                        'SOURCE',      'SUBSCRIBE',  'TRACE',
                        'UNBIND',      'UNLINK',     'UNLOCK',
                        'UNSUBSCRIBE'
                      ],
                      STATUS_CODES: {
                        '100': 'Continue',
                        '101': 'Switching Protocols',
                        '102': 'Processing',
                        '103': 'Early Hints',
                        '200': 'OK',
                        '201': 'Created',
                        '202': 'Accepted',
                        '203': 'Non-Authoritative Information',
                        '204': 'No Content',
                        '205': 'Reset Content',
                        '206': 'Partial Content',
                        '207': 'Multi-Status',
                        '208': 'Already Reported',
                        '226': 'IM Used',
                        '300': 'Multiple Choices',
                        '301': 'Moved Permanently',
                        '302': 'Found',
                        '303': 'See Other',
                        '304': 'Not Modified',
                        '305': 'Use Proxy',
                        '307': 'Temporary Redirect',
                        '308': 'Permanent Redirect',
                        '400': 'Bad Request',
                        '401': 'Unauthorized',
                        '402': 'Payment Required',
                        '403': 'Forbidden',
                        '404': 'Not Found',
                        '405': 'Method Not Allowed',
                        '406': 'Not Acceptable',
                        '407': 'Proxy Authentication Required',
                        '408': 'Request Timeout',
                        '409': 'Conflict',
                        '410': 'Gone',
                        '411': 'Length Required',
                        '412': 'Precondition Failed',
                        '413': 'Payload Too Large',
                        '414': 'URI Too Long',
                        '415': 'Unsupported Media Type',
                        '416': 'Range Not Satisfiable',
                        '417': 'Expectation Failed',
                        '418': "I'm a Teapot",
                        '421': 'Misdirected Request',
                        '422': 'Unprocessable Entity',
                        '423': 'Locked',
                        '424': 'Failed Dependency',
                        '425': 'Too Early',
                        '426': 'Upgrade Required',
                        '428': 'Precondition Required',
                        '429': 'Too Many Requests',
                        '431': 'Request Header Fields Too Large',
                        '451': 'Unavailable For Legal Reasons',
                        '500': 'Internal Server Error',
                        '501': 'Not Implemented',
                        '502': 'Bad Gateway',
                        '503': 'Service Unavailable',
                        '504': 'Gateway Timeout',
                        '505': 'HTTP Version Not Supported',
                        '506': 'Variant Also Negotiates',
                        '507': 'Insufficient Storage',
                        '508': 'Loop Detected',
                        '509': 'Bandwidth Limit Exceeded',
                        '510': 'Not Extended',
                        '511': 'Network Authentication Required'
                      },
                      Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                      ClientRequest: [Function: ClientRequest],
                      IncomingMessage: [Function: IncomingMessage],
                      OutgoingMessage: [Function: OutgoingMessage],
                      Server: [Function: Server],
                      ServerResponse: [Function: ServerResponse],
                      createServer: [Function: createServer],
                      validateHeaderName: [Function: __node_internal_],
                      validateHeaderValue: [Function: __node_internal_],
                      get: [Function: get],
                      request: [Function: request],
                      setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                      maxHeaderSize: [Getter],
                      globalAgent: [Getter/Setter]
                    },
                    'https:': {
                      Agent: [Function: Agent],
                      globalAgent: [Circular *3],
                      Server: [Function: Server],
                      createServer: [Function: createServer],
                      get: [Function: get],
                      request: [Function: request]
                    }
                  },
                  pathname: '/v16.0/112768655243132_193549723829605',
                  search: '?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
                  _defaultAgent: [Circular *3],
                  host: 'graph.facebook.com',
                  keepAlive: true,
                  scheduling: 'lifo',
                  timeout: 5000,
                  noDelay: true,
                  servername: 'graph.facebook.com',
                  _agentKey: 'graph.facebook.com:443:::::::::::::::::::::',
                  encoding: null,
                  keepAliveInitialDelay: 1000
                }
              }
            ]
          },
          keepAliveMsecs: 1000,
          keepAlive: true,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'graph.facebook.com:443:::::::::::::::::::::': <Buffer 30 82 07 9f 02 01 01 02 02 03 04 04 02 13 03 04 20 27 c5 8c 2e 19 f3 05 ac 16 2c 2e e7 a4 47 01 f5 5a eb 56 4b 24 20 5b 84 3d 7a 96 b1 04 3d 0d 0e 04 ... 1905 more bytes>
            },
            list: [ 'graph.facebook.com:443:::::::::::::::::::::' ]
          },
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'DELETE',
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        joinDuplicateHeaders: undefined,
        path: '/v16.0/112768655243132_193248887193022?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
        _ended: true,
        res: IncomingMessage {
          _readableState: ReadableState {
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            awaitDrainWriters: null,
            [Symbol(kState)]: 110426134
          },
          _events: [Object: null prototype] {
            end: [
              [Function: responseOnEnd],
              [Function: onend],
              [Function: onend]
            ],
            close: [
              [Function (anonymous)],
              [Function: onclose],
              [Function: onclose]
            ],
            finish: [ [Function: onfinish], [Function: onfinish] ],
            error: [
              [Function: onerror],
              [Function: onError],
              [Function: onerror]
            ]
          },
          _eventsCount: 4,
          _maxListeners: undefined,
          socket: null,
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          rawHeaders: [
            'Content-Encoding',
            'br',
            'Vary',
            'Origin',
            'Vary',
            'Accept-Encoding',
            'Access-Control-Allow-Origin',
            '*',
            'cross-origin-resource-policy',
            'cross-origin',
            'x-app-usage',
            '{"call_count":0,"total_cputime":0,"total_time":0}',
            'Content-Type',
            'application/json',
            'WWW-Authenticate',
            `OAuth "Facebook Platform" "invalid_request" "Unsupported delete request. Object with ID '112768655243132_193248887193022' does not exist, cannot be loaded due to missing permissions, or does not support this operation. Please read the Graph API documentation at https://developers.facebook.com/docs/graph-api"`,
            'facebook-api-version',
            'v16.0',
            'Strict-Transport-Security',
            'max-age=15552000; preload',
            'Pragma',
            'no-cache',
            'Cache-Control',
            'no-store',
            'Expires',
            'Sat, 01 Jan 2000 00:00:00 GMT',
            'x-fb-request-id',
            'AYtqZB91Y6IPArM_djqbOb8',
            'x-fb-trace-id',
            'C+MEPd89hnu',
            'x-fb-rev',
            '1010466044',
            'X-FB-Debug',
            'KE0TRY3TGLE34joOn0QCfylaUo0Nk+mL3wIu6fqa2ZzwpHLeVQNz/fqjd8FRT3yTqF4ZZndEKFCx9Q/GSmhGlQ==',
            'Date',
            'Sat, 16 Dec 2023 11:17:52 GMT',
            'Proxy-Status',
            'http_request_error; e_clientaddr="AcK-Blw6eQHihGkELqIZLp45ofO9d4KBSVjEZpipIJFzEJCZ112XBr_rZGxXyFBo6y9-0MZJhQtd3Ur8Ni1n0EwWhxyifdDSfKWti5wUJ6AhdDU"; e_fb_vipport="AcJ8BCkP_nS8WuvJd1b3eskYBCmJOtzQ8hUPI44FHWTl1E2Bh3ffv-UFUj_p"; e_upip="AcJTI9ajOpvOzF88RlhSUFUI4JoLBHL6k0nrhU4TiHd3yS7lyo7wXt68TdKMCuLms2CBIIeFiQW3-1X_4_XgLiiB3gO9PWm1D1k"; e_fb_hostheader="AcJLvnbAz5l5GRJcLsY0mDkVCqAkY0XQ9gLN3YUqlmZSu4Ucn7Crkndc-WZIdkefeKiDSnKy_KN4Dqsl"; e_fb_vipaddr="AcLVTRLRQwmyTit7CkF5_0L3Oq3mPZNMKpFc8jKieRGt7ILRDZO427iz1cgr86SMRidqvQ1P2BY8PaSIE0pv4XxWGQpuRUwTOw"; e_fb_requesthandler="AcJeEm4zPQO1d6YLuw97duJBKQZaxPUtMs5U15aarsBd19sF9mcBo5PqoLAi9B4Nw4nvDyNif9k"; e_fb_builduser="AcL9eqqdZ9iR1nLLft5qA2tRX-JLYOed2be9HZIA0ZLPvLitByTInAxnyI5zTvGwHdM"; e_fb_binaryversion="AcKe_cCtX7EtEu8aJoHztTdxp4ImHaBcV8K4WXYxIaKJUcYhxU6faEa3eKmEMvLqhFnP4E7ltRQ8wrEonDP2MD5FrFPWXToEeKE"; e_proxy="AcLObYbXEbPHlvfBZtyB-Zy11oMSgr_SiAFAlB-IoG1RKO8EpgTYUl7PjKkXOZsxfox1IBCOdob3yvdnNmM", http_request_error; e_clientaddr="AcLxvALHGilBdzgLRhZRTSzf9E7GxW7nxWJSDCJYIfn7Tlbur19dksGvd6JIs9LBZWJhjqiwkiAqbbpUuQ"; e_fb_vipport="AcIZbTYZAif5vveM1f44pPqP8jmUQBxg-sle-XDJu5VBEWY-AD4mx9QbQycm"; e_upip="AcL5IbFbi_oLG6t5H0JPwsmb5Mc74G_w6g0oiGINtVc62jNE6a03wXW6wuHimi4cM1euUUKZaruBzEJErTa-ci3ZribsiMZgjA"; e_fb_hostheader="AcKMJ3dMiGUDcTOdqe_d7FLNuDkV_syd7NdMRBcX3Wq1UNR2FfkmQhh5uikVNJ5ZNZ9qdRI_OE4gIxoA"; e_fb_vipaddr="AcIIWReh37Uc1OEkvUJGjvCWwmxk3C2-pDDLbQ3rfWsXYl9DZp4L_Gt6rGFZUM0BNQD9yg"; e_fb_requesthandler="AcIMQh6a3nFjAjL5q51iTbpedpjdy5DcXivK2bMJadfiYG8ZYYXgHb8_vPJEUiTwkCEHpsQnfl8"; e_fb_builduser="AcKEFpaF7_DwLF2shPJKJ8f5Ua45Q6sQP1DzcZ3najXbulSNYI7i2ghI4SdEXiBSJEA"; e_fb_binaryversion="AcJ2nJTuXfFKG5SZEzv-xQmvEr0h8QY3bEVeuS_EhHOVvGeFT2MSnt4_oyQjdtrvIN98sesnLJyJkDWCmXilVPaW7yV08BswMuc"; e_proxy="AcKKzEsdD_9fDs-9vobgNDtWUDFXTz_wB1aTOMSny8AiaDEFhL9tQ9MZuDFqeAPpgrPdeP5eHJhi8Io"',
            'Alt-Svc',
            'h3=":443"; ma=86400',
            'Connection',
            'keep-alive',
            'Content-Length',
            '273'
          ],
          rawTrailers: [],
          joinDuplicateHeaders: undefined,
          aborted: false,
          upgrade: false,
          url: '',
          method: null,
          statusCode: 400,
          statusMessage: 'Bad Request',
          client: <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: <Buffer 30 82 07 9e 02 01 01 02 02 03 04 04 02 13 03 04 20 c0 b7 b3 43 4c 5f 88 6d f2 0d df b6 9e f5 2f 4a 37 6e 7b ee e2 c0 27 2e 1f e1 40 73 ed a0 6a cf 04 ... 1904 more bytes>,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'graph.facebook.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: bound onceWrapper] {
                listener: [Function: freeSocketErrorListener]
              }
            },
            _eventsCount: 9,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'graph.facebook.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              awaitDrainWriters: null,
              [Symbol(kState)]: 60035160
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              highWaterMark: 16384,
              length: 0,
              corked: 0,
              onwrite: [Function: bound onwrite],
              writelen: 0,
              bufferedIndex: 0,
              pendingcb: 0,
              [Symbol(kState)]: 34340932,
              [Symbol(kBufferedValue)]: null,
              [Symbol(kWriteCbValue)]: [Function: bound onFinish]
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: <ref *2> TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: null,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1],
              [Symbol(resource_symbol)]: ReusedHandle { type: 57, handle: [Circular *2] }
            },
            _requestCert: true,
            _rejectUnauthorized: true,
            timeout: 5000,
            parser: null,
            _httpMessage: null,
            [Symbol(alpncallback)]: null,
            [Symbol(res)]: <ref *2> TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: null,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1],
              [Symbol(resource_symbol)]: ReusedHandle { type: 57, handle: [Circular *2] }
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: -1,
            [Symbol(kHandle)]: <ref *2> TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: null,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1],
              [Symbol(resource_symbol)]: ReusedHandle { type: 57, handle: [Circular *2] }
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: Timeout {
              _idleTimeout: 5000,
              _idlePrev: [TimersList],
              _idleNext: [Timeout],
              _idleStart: 152709,
              _onTimeout: [Function: bound ],
              _timerArgs: undefined,
              _repeat: null,
              _destroyed: false,
              [Symbol(refed)]: false,
              [Symbol(kHasPrimitive)]: false,
              [Symbol(asyncId)]: 2986,
              [Symbol(triggerId)]: 2984
            },
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 1,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              session: <Buffer 30 82 07 9e 02 01 01 02 02 03 04 04 02 13 03 04 20 c0 b7 b3 43 4c 5f 88 6d f2 0d df b6 9e f5 2f 4a 37 6e 7b ee e2 c0 27 2e 1f e1 40 73 ed a0 6a cf 04 ... 1904 more bytes>,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'DELETE',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'User-Agent': 'axios/1.4.0',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              family: undefined,
              lookup: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'graph.facebook.com',
              port: 443,
              agent: undefined,
              nativeProtocols: {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      keepAlive: true,
                      scheduling: 'lifo',
                      timeout: 5000,
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {},
                    freeSockets: [Object: null prototype] {
                      'graph.facebook.com:443:::::::::::::::::::::': [ [Circular *1] ]
                    },
                    keepAliveMsecs: 1000,
                    keepAlive: true,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'graph.facebook.com:443:::::::::::::::::::::': <Buffer 30 82 07 9f 02 01 01 02 02 03 04 04 02 13 03 04 20 27 c5 8c 2e 19 f3 05 ac 16 2c 2e e7 a4 47 01 f5 5a eb 56 4b 24 20 5b 84 3d 7a 96 b1 04 3d 0d 0e 04 ... 1905 more bytes>
                      },
                      list: [ 'graph.facebook.com:443:::::::::::::::::::::' ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/v16.0/112768655243132_193549723829605',
              search: '?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
              _defaultAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] {
                  keepAlive: true,
                  scheduling: 'lifo',
                  timeout: 5000,
                  noDelay: true,
                  path: null
                },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {
                  'graph.facebook.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                keepAliveMsecs: 1000,
                keepAlive: true,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'graph.facebook.com:443:::::::::::::::::::::': <Buffer 30 82 07 9f 02 01 01 02 02 03 04 04 02 13 03 04 20 27 c5 8c 2e 19 f3 05 ac 16 2c 2e e7 a4 47 01 f5 5a eb 56 4b 24 20 5b 84 3d 7a 96 b1 04 3d 0d 0e 04 ... 1905 more bytes>
                  },
                  list: [ 'graph.facebook.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'graph.facebook.com',
              keepAlive: true,
              scheduling: 'lifo',
              timeout: 5000,
              noDelay: true,
              servername: 'graph.facebook.com',
              _agentKey: 'graph.facebook.com:443:::::::::::::::::::::',
              encoding: null,
              keepAliveInitialDelay: 1000
            }
          },
          _consuming: true,
          _dumped: false,
          req: [Circular *4],
          responseUrl: 'https://graph.facebook.com/v16.0/112768655243132_193248887193022?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
          redirects: [],
          [Symbol(kCapture)]: false,
          [Symbol(kHeaders)]: {
            vary: 'Origin, Accept-Encoding',
            'access-control-allow-origin': '*',
            'cross-origin-resource-policy': 'cross-origin',
            'x-app-usage': '{"call_count":0,"total_cputime":0,"total_time":0}',
            'content-type': 'application/json',
            'www-authenticate': `OAuth "Facebook Platform" "invalid_request" "Unsupported delete request. Object with ID '112768655243132_193248887193022' does not exist, cannot be loaded due to missing permissions, or does not support this operation. Please read the Graph API documentation at https://developers.facebook.com/docs/graph-api"`,
            'facebook-api-version': 'v16.0',
            'strict-transport-security': 'max-age=15552000; preload',
            pragma: 'no-cache',
            'cache-control': 'no-store',
            expires: 'Sat, 01 Jan 2000 00:00:00 GMT',
            'x-fb-request-id': 'AYtqZB91Y6IPArM_djqbOb8',
            'x-fb-trace-id': 'C+MEPd89hnu',
            'x-fb-rev': '1010466044',
            'x-fb-debug': 'KE0TRY3TGLE34joOn0QCfylaUo0Nk+mL3wIu6fqa2ZzwpHLeVQNz/fqjd8FRT3yTqF4ZZndEKFCx9Q/GSmhGlQ==',
            date: 'Sat, 16 Dec 2023 11:17:52 GMT',
            'proxy-status': 'http_request_error; e_clientaddr="AcK-Blw6eQHihGkELqIZLp45ofO9d4KBSVjEZpipIJFzEJCZ112XBr_rZGxXyFBo6y9-0MZJhQtd3Ur8Ni1n0EwWhxyifdDSfKWti5wUJ6AhdDU"; e_fb_vipport="AcJ8BCkP_nS8WuvJd1b3eskYBCmJOtzQ8hUPI44FHWTl1E2Bh3ffv-UFUj_p"; e_upip="AcJTI9ajOpvOzF88RlhSUFUI4JoLBHL6k0nrhU4TiHd3yS7lyo7wXt68TdKMCuLms2CBIIeFiQW3-1X_4_XgLiiB3gO9PWm1D1k"; e_fb_hostheader="AcJLvnbAz5l5GRJcLsY0mDkVCqAkY0XQ9gLN3YUqlmZSu4Ucn7Crkndc-WZIdkefeKiDSnKy_KN4Dqsl"; e_fb_vipaddr="AcLVTRLRQwmyTit7CkF5_0L3Oq3mPZNMKpFc8jKieRGt7ILRDZO427iz1cgr86SMRidqvQ1P2BY8PaSIE0pv4XxWGQpuRUwTOw"; e_fb_requesthandler="AcJeEm4zPQO1d6YLuw97duJBKQZaxPUtMs5U15aarsBd19sF9mcBo5PqoLAi9B4Nw4nvDyNif9k"; e_fb_builduser="AcL9eqqdZ9iR1nLLft5qA2tRX-JLYOed2be9HZIA0ZLPvLitByTInAxnyI5zTvGwHdM"; e_fb_binaryversion="AcKe_cCtX7EtEu8aJoHztTdxp4ImHaBcV8K4WXYxIaKJUcYhxU6faEa3eKmEMvLqhFnP4E7ltRQ8wrEonDP2MD5FrFPWXToEeKE"; e_proxy="AcLObYbXEbPHlvfBZtyB-Zy11oMSgr_SiAFAlB-IoG1RKO8EpgTYUl7PjKkXOZsxfox1IBCOdob3yvdnNmM", http_request_error; e_clientaddr="AcLxvALHGilBdzgLRhZRTSzf9E7GxW7nxWJSDCJYIfn7Tlbur19dksGvd6JIs9LBZWJhjqiwkiAqbbpUuQ"; e_fb_vipport="AcIZbTYZAif5vveM1f44pPqP8jmUQBxg-sle-XDJu5VBEWY-AD4mx9QbQycm"; e_upip="AcL5IbFbi_oLG6t5H0JPwsmb5Mc74G_w6g0oiGINtVc62jNE6a03wXW6wuHimi4cM1euUUKZaruBzEJErTa-ci3ZribsiMZgjA"; e_fb_hostheader="AcKMJ3dMiGUDcTOdqe_d7FLNuDkV_syd7NdMRBcX3Wq1UNR2FfkmQhh5uikVNJ5ZNZ9qdRI_OE4gIxoA"; e_fb_vipaddr="AcIIWReh37Uc1OEkvUJGjvCWwmxk3C2-pDDLbQ3rfWsXYl9DZp4L_Gt6rGFZUM0BNQD9yg"; e_fb_requesthandler="AcIMQh6a3nFjAjL5q51iTbpedpjdy5DcXivK2bMJadfiYG8ZYYXgHb8_vPJEUiTwkCEHpsQnfl8"; e_fb_builduser="AcKEFpaF7_DwLF2shPJKJ8f5Ua45Q6sQP1DzcZ3najXbulSNYI7i2ghI4SdEXiBSJEA"; e_fb_binaryversion="AcJ2nJTuXfFKG5SZEzv-xQmvEr0h8QY3bEVeuS_EhHOVvGeFT2MSnt4_oyQjdtrvIN98sesnLJyJkDWCmXilVPaW7yV08BswMuc"; e_proxy="AcKKzEsdD_9fDs-9vobgNDtWUDFXTz_wB1aTOMSny8AiaDEFhL9tQ9MZuDFqeAPpgrPdeP5eHJhi8Io"',
            'alt-svc': 'h3=":443"; ma=86400',
            connection: 'keep-alive',
            'content-length': '273'
          },
          [Symbol(kHeadersCount)]: 44,
          [Symbol(kTrailers)]: null,
          [Symbol(kTrailersCount)]: 0
        },
        aborted: false,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: true,
        host: 'graph.facebook.com',
        protocol: 'https:',
        _redirectable: Writable {
          _writableState: WritableState {
            highWaterMark: 16384,
            length: 0,
            corked: 0,
            onwrite: [Function: bound onwrite],
            writelen: 0,
            bufferedIndex: 0,
            pendingcb: 0,
            [Symbol(kState)]: 34357356,
            [Symbol(kBufferedValue)]: null
          },
          _events: [Object: null prototype] {
            response: [Function: handleResponse],
            error: [Function: handleRequestError],
            socket: [Function: handleRequestSocket]
          },
          _eventsCount: 3,
          _maxListeners: undefined,
          _options: {
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: '/v16.0/112768655243132_193248887193022?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
            method: 'DELETE',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'User-Agent': 'axios/1.4.0',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            lookup: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'graph.facebook.com',
            port: '',
            agent: undefined,
            nativeProtocols: <ref *5> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    keepAlive: true,
                    scheduling: 'lifo',
                    timeout: 5000,
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {},
                  freeSockets: [Object: null prototype] {
                    'graph.facebook.com:443:::::::::::::::::::::': [
                      <ref *1> TLSSocket {
                        _tlsOptions: {
                          allowHalfOpen: undefined,
                          pipe: false,
                          secureContext: SecureContext { context: SecureContext {} },
                          isServer: false,
                          requestCert: true,
                          rejectUnauthorized: true,
                          session: <Buffer 30 82 07 9e 02 01 01 02 02 03 04 04 02 13 03 04 20 c0 b7 b3 43 4c 5f 88 6d f2 0d df b6 9e f5 2f 4a 37 6e 7b ee e2 c0 27 2e 1f e1 40 73 ed a0 6a cf 04 ... 1904 more bytes>,
                          ALPNProtocols: undefined,
                          requestOCSP: undefined,
                          enableTrace: undefined,
                          pskCallback: undefined,
                          highWaterMark: undefined,
                          onread: undefined,
                          signal: undefined
                        },
                        _secureEstablished: true,
                        _securePending: false,
                        _newSessionPending: false,
                        _controlReleased: true,
                        secureConnecting: false,
                        _SNICallback: null,
                        servername: 'graph.facebook.com',
                        alpnProtocol: false,
                        authorized: true,
                        authorizationError: null,
                        encrypted: true,
                        _events: [Object: null prototype] {
                          close: [
                            [Function: onSocketCloseDestroySSL],
                            [Function: bound onceWrapper] {
                              listener: [Function (anonymous)]
                            },
                            [Function: onClose]
                          ],
                          end: [Function: onReadableStreamEnd],
                          newListener: [Function: keylogNewListener],
                          secure: [Function: onConnectSecure],
                          session: [Function (anonymous)],
                          free: [Function: onFree],
                          timeout: [Function: onTimeout],
                          agentRemove: [Function: onRemove],
                          error: [Function: bound onceWrapper] {
                            listener: [Function: freeSocketErrorListener]
                          }
                        },
                        _eventsCount: 9,
                        connecting: false,
                        _hadError: false,
                        _parent: null,
                        _host: 'graph.facebook.com',
                        _closeAfterHandlingError: false,
                        _readableState: ReadableState {
                          highWaterMark: 16384,
                          buffer: BufferList { head: null, tail: null, length: 0 },
                          length: 0,
                          pipes: [],
                          awaitDrainWriters: null,
                          [Symbol(kState)]: 60035160
                        },
                        _maxListeners: undefined,
                        _writableState: WritableState {
                          highWaterMark: 16384,
                          length: 0,
                          corked: 0,
                          onwrite: [Function: bound onwrite],
                          writelen: 0,
                          bufferedIndex: 0,
                          pendingcb: 0,
                          [Symbol(kState)]: 34340932,
                          [Symbol(kBufferedValue)]: null,
                          [Symbol(kWriteCbValue)]: [Function: bound onFinish]
                        },
                        allowHalfOpen: false,
                        _sockname: null,
                        _pendingData: null,
                        _pendingEncoding: '',
                        server: undefined,
                        _server: null,
                        ssl: <ref *2> TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *1]
                          },
                          _parentWrap: null,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *1],
                          [Symbol(resource_symbol)]: ReusedHandle {
                            type: 57,
                            handle: [Circular *2]
                          }
                        },
                        _requestCert: true,
                        _rejectUnauthorized: true,
                        timeout: 5000,
                        parser: null,
                        _httpMessage: null,
                        [Symbol(alpncallback)]: null,
                        [Symbol(res)]: <ref *2> TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *1]
                          },
                          _parentWrap: null,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *1],
                          [Symbol(resource_symbol)]: ReusedHandle {
                            type: 57,
                            handle: [Circular *2]
                          }
                        },
                        [Symbol(verified)]: true,
                        [Symbol(pendingSession)]: null,
                        [Symbol(async_id_symbol)]: -1,
                        [Symbol(kHandle)]: <ref *2> TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *1]
                          },
                          _parentWrap: null,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *1],
                          [Symbol(resource_symbol)]: ReusedHandle {
                            type: 57,
                            handle: [Circular *2]
                          }
                        },
                        [Symbol(lastWriteQueueSize)]: 0,
                        [Symbol(timeout)]: Timeout {
                          _idleTimeout: 5000,
                          _idlePrev: [TimersList],
                          _idleNext: [Timeout],
                          _idleStart: 152709,
                          _onTimeout: [Function: bound ],
                          _timerArgs: undefined,
                          _repeat: null,
                          _destroyed: false,
                          [Symbol(refed)]: false,
                          [Symbol(kHasPrimitive)]: false,
                          [Symbol(asyncId)]: 2986,
                          [Symbol(triggerId)]: 2984
                        },
                        [Symbol(kBuffer)]: null,
                        [Symbol(kBufferCb)]: null,
                        [Symbol(kBufferGen)]: null,
                        [Symbol(kCapture)]: false,
                        [Symbol(kSetNoDelay)]: false,
                        [Symbol(kSetKeepAlive)]: true,
                        [Symbol(kSetKeepAliveInitialDelay)]: 1,
                        [Symbol(kBytesRead)]: 0,
                        [Symbol(kBytesWritten)]: 0,
                        [Symbol(connect-options)]: {
                          rejectUnauthorized: true,
                          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                          checkServerIdentity: [Function: checkServerIdentity],
                          minDHSize: 1024,
                          session: <Buffer 30 82 07 9e 02 01 01 02 02 03 04 04 02 13 03 04 20 c0 b7 b3 43 4c 5f 88 6d f2 0d df b6 9e f5 2f 4a 37 6e 7b ee e2 c0 27 2e 1f e1 40 73 ed a0 6a cf 04 ... 1904 more bytes>,
                          maxRedirects: 21,
                          maxBodyLength: Infinity,
                          protocol: 'https:',
                          path: null,
                          method: 'DELETE',
                          headers: [Object: null prototype] {
                            Accept: 'application/json, text/plain, */*',
                            'User-Agent': 'axios/1.4.0',
                            'Accept-Encoding': 'gzip, compress, deflate, br'
                          },
                          agents: { http: undefined, https: undefined },
                          auth: undefined,
                          family: undefined,
                          lookup: undefined,
                          beforeRedirect: [Function: dispatchBeforeRedirect],
                          beforeRedirects: { proxy: [Function: beforeRedirect] },
                          hostname: 'graph.facebook.com',
                          port: 443,
                          agent: undefined,
                          nativeProtocols: [Circular *5],
                          pathname: '/v16.0/112768655243132_193549723829605',
                          search: '?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
                          _defaultAgent: [Circular *3],
                          host: 'graph.facebook.com',
                          keepAlive: true,
                          scheduling: 'lifo',
                          timeout: 5000,
                          noDelay: true,
                          servername: 'graph.facebook.com',
                          _agentKey: 'graph.facebook.com:443:::::::::::::::::::::',
                          encoding: null,
                          keepAliveInitialDelay: 1000
                        }
                      }
                    ]
                  },
                  keepAliveMsecs: 1000,
                  keepAlive: true,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'graph.facebook.com:443:::::::::::::::::::::': <Buffer 30 82 07 9f 02 01 01 02 02 03 04 04 02 13 03 04 20 27 c5 8c 2e 19 f3 05 ac 16 2c 2e e7 a4 47 01 f5 5a eb 56 4b 24 20 5b 84 3d 7a 96 b1 04 3d 0d 0e 04 ... 1905 more bytes>
                    },
                    list: [ 'graph.facebook.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v16.0/112768655243132_193248887193022',
            search: '?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD'
          },
          _ended: true,
          _ending: true,
          _redirectCount: 0,
          _redirects: [],
          _requestBodyLength: 0,
          _requestBodyBuffers: [],
          _onNativeResponse: [Function (anonymous)],
          _currentRequest: [Circular *4],
          _currentUrl: 'https://graph.facebook.com/v16.0/112768655243132_193248887193022?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
          [Symbol(kCapture)]: false
        },
        [Symbol(kCapture)]: false,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
          'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
          host: [ 'Host', 'graph.facebook.com' ]
        },
        [Symbol(errored)]: null,
        [Symbol(kHighWaterMark)]: 16384,
        [Symbol(kRejectNonStandardBodyWrites)]: false,
        [Symbol(kUniqueHeaders)]: null
      },
      response: {
        status: 400,
        statusText: 'Bad Request',
        headers: AxiosHeaders {
          vary: 'Origin, Accept-Encoding',
          'access-control-allow-origin': '*',
          'cross-origin-resource-policy': 'cross-origin',
          'x-app-usage': '{"call_count":0,"total_cputime":0,"total_time":0}',
          'content-type': 'application/json',
          'www-authenticate': `OAuth "Facebook Platform" "invalid_request" "Unsupported delete request. Object with ID '112768655243132_193248887193022' does not exist, cannot be loaded due to missing permissions, or does not support this operation. Please read the Graph API documentation at https://developers.facebook.com/docs/graph-api"`,
          'facebook-api-version': 'v16.0',
          'strict-transport-security': 'max-age=15552000; preload',
          pragma: 'no-cache',
          'cache-control': 'no-store',
          expires: 'Sat, 01 Jan 2000 00:00:00 GMT',
          'x-fb-request-id': 'AYtqZB91Y6IPArM_djqbOb8',
          'x-fb-trace-id': 'C+MEPd89hnu',
          'x-fb-rev': '1010466044',
          'x-fb-debug': 'KE0TRY3TGLE34joOn0QCfylaUo0Nk+mL3wIu6fqa2ZzwpHLeVQNz/fqjd8FRT3yTqF4ZZndEKFCx9Q/GSmhGlQ==',
          date: 'Sat, 16 Dec 2023 11:17:52 GMT',
          'proxy-status': 'http_request_error; e_clientaddr="AcK-Blw6eQHihGkELqIZLp45ofO9d4KBSVjEZpipIJFzEJCZ112XBr_rZGxXyFBo6y9-0MZJhQtd3Ur8Ni1n0EwWhxyifdDSfKWti5wUJ6AhdDU"; e_fb_vipport="AcJ8BCkP_nS8WuvJd1b3eskYBCmJOtzQ8hUPI44FHWTl1E2Bh3ffv-UFUj_p"; e_upip="AcJTI9ajOpvOzF88RlhSUFUI4JoLBHL6k0nrhU4TiHd3yS7lyo7wXt68TdKMCuLms2CBIIeFiQW3-1X_4_XgLiiB3gO9PWm1D1k"; e_fb_hostheader="AcJLvnbAz5l5GRJcLsY0mDkVCqAkY0XQ9gLN3YUqlmZSu4Ucn7Crkndc-WZIdkefeKiDSnKy_KN4Dqsl"; e_fb_vipaddr="AcLVTRLRQwmyTit7CkF5_0L3Oq3mPZNMKpFc8jKieRGt7ILRDZO427iz1cgr86SMRidqvQ1P2BY8PaSIE0pv4XxWGQpuRUwTOw"; e_fb_requesthandler="AcJeEm4zPQO1d6YLuw97duJBKQZaxPUtMs5U15aarsBd19sF9mcBo5PqoLAi9B4Nw4nvDyNif9k"; e_fb_builduser="AcL9eqqdZ9iR1nLLft5qA2tRX-JLYOed2be9HZIA0ZLPvLitByTInAxnyI5zTvGwHdM"; e_fb_binaryversion="AcKe_cCtX7EtEu8aJoHztTdxp4ImHaBcV8K4WXYxIaKJUcYhxU6faEa3eKmEMvLqhFnP4E7ltRQ8wrEonDP2MD5FrFPWXToEeKE"; e_proxy="AcLObYbXEbPHlvfBZtyB-Zy11oMSgr_SiAFAlB-IoG1RKO8EpgTYUl7PjKkXOZsxfox1IBCOdob3yvdnNmM", http_request_error; e_clientaddr="AcLxvALHGilBdzgLRhZRTSzf9E7GxW7nxWJSDCJYIfn7Tlbur19dksGvd6JIs9LBZWJhjqiwkiAqbbpUuQ"; e_fb_vipport="AcIZbTYZAif5vveM1f44pPqP8jmUQBxg-sle-XDJu5VBEWY-AD4mx9QbQycm"; e_upip="AcL5IbFbi_oLG6t5H0JPwsmb5Mc74G_w6g0oiGINtVc62jNE6a03wXW6wuHimi4cM1euUUKZaruBzEJErTa-ci3ZribsiMZgjA"; e_fb_hostheader="AcKMJ3dMiGUDcTOdqe_d7FLNuDkV_syd7NdMRBcX3Wq1UNR2FfkmQhh5uikVNJ5ZNZ9qdRI_OE4gIxoA"; e_fb_vipaddr="AcIIWReh37Uc1OEkvUJGjvCWwmxk3C2-pDDLbQ3rfWsXYl9DZp4L_Gt6rGFZUM0BNQD9yg"; e_fb_requesthandler="AcIMQh6a3nFjAjL5q51iTbpedpjdy5DcXivK2bMJadfiYG8ZYYXgHb8_vPJEUiTwkCEHpsQnfl8"; e_fb_builduser="AcKEFpaF7_DwLF2shPJKJ8f5Ua45Q6sQP1DzcZ3najXbulSNYI7i2ghI4SdEXiBSJEA"; e_fb_binaryversion="AcJ2nJTuXfFKG5SZEzv-xQmvEr0h8QY3bEVeuS_EhHOVvGeFT2MSnt4_oyQjdtrvIN98sesnLJyJkDWCmXilVPaW7yV08BswMuc"; e_proxy="AcKKzEsdD_9fDs-9vobgNDtWUDFXTz_wB1aTOMSny8AiaDEFhL9tQ9MZuDFqeAPpgrPdeP5eHJhi8Io"',
          'alt-svc': 'h3=":443"; ma=86400',
          connection: 'keep-alive',
          'content-length': '273'
        },
        config: {
          transitional: {
            silentJSONParsing: true,
            forcedJSONParsing: true,
            clarifyTimeoutError: false
          },
          adapter: [ 'xhr', 'http' ],
          transformRequest: [ [Function: transformRequest] ],
          transformResponse: [ [Function: transformResponse] ],
          timeout: 0,
          xsrfCookieName: 'XSRF-TOKEN',
          xsrfHeaderName: 'X-XSRF-TOKEN',
          maxContentLength: -1,
          maxBodyLength: -1,
          env: {
            FormData: [Function: FormData] {
              LINE_BREAK: '\r\n',
              DEFAULT_CONTENT_TYPE: 'application/octet-stream'
            },
            Blob: [class Blob]
          },
          validateStatus: [Function: validateStatus],
          headers: AxiosHeaders {
            Accept: 'application/json, text/plain, */*',
            'User-Agent': 'axios/1.4.0',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          method: 'delete',
          url: 'https://graph.facebook.com/v16.0/112768655243132_193248887193022?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
          data: undefined
        },
        request: <ref *4> ClientRequest {
          _events: [Object: null prototype] {
            abort: [Function (anonymous)],
            aborted: [Function (anonymous)],
            connect: [Function (anonymous)],
            error: [Function (anonymous)],
            socket: [Function (anonymous)],
            timeout: [Function (anonymous)],
            finish: [Function: requestOnFinish]
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          outputData: [],
          outputSize: 0,
          writable: true,
          destroyed: true,
          _last: true,
          chunkedEncoding: false,
          shouldKeepAlive: true,
          maxRequestsOnConnectionReached: false,
          _defaultKeepAlive: true,
          useChunkedEncodingByDefault: false,
          sendDate: false,
          _removedConnection: false,
          _removedContLen: false,
          _removedTE: false,
          strictContentLength: false,
          _contentLength: 0,
          _hasBody: true,
          _trailer: '',
          finished: true,
          _headerSent: true,
          _closed: true,
          socket: <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: <Buffer 30 82 07 9e 02 01 01 02 02 03 04 04 02 13 03 04 20 c0 b7 b3 43 4c 5f 88 6d f2 0d df b6 9e f5 2f 4a 37 6e 7b ee e2 c0 27 2e 1f e1 40 73 ed a0 6a cf 04 ... 1904 more bytes>,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'graph.facebook.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: bound onceWrapper] {
                listener: [Function: freeSocketErrorListener]
              }
            },
            _eventsCount: 9,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'graph.facebook.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              awaitDrainWriters: null,
              [Symbol(kState)]: 60035160
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              highWaterMark: 16384,
              length: 0,
              corked: 0,
              onwrite: [Function: bound onwrite],
              writelen: 0,
              bufferedIndex: 0,
              pendingcb: 0,
              [Symbol(kState)]: 34340932,
              [Symbol(kBufferedValue)]: null,
              [Symbol(kWriteCbValue)]: [Function: bound onFinish]
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: <ref *2> TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: null,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1],
              [Symbol(resource_symbol)]: ReusedHandle { type: 57, handle: [Circular *2] }
            },
            _requestCert: true,
            _rejectUnauthorized: true,
            timeout: 5000,
            parser: null,
            _httpMessage: null,
            [Symbol(alpncallback)]: null,
            [Symbol(res)]: <ref *2> TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: null,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1],
              [Symbol(resource_symbol)]: ReusedHandle { type: 57, handle: [Circular *2] }
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: -1,
            [Symbol(kHandle)]: <ref *2> TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: null,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1],
              [Symbol(resource_symbol)]: ReusedHandle { type: 57, handle: [Circular *2] }
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: Timeout {
              _idleTimeout: 5000,
              _idlePrev: [TimersList],
              _idleNext: [Timeout],
              _idleStart: 152709,
              _onTimeout: [Function: bound ],
              _timerArgs: undefined,
              _repeat: null,
              _destroyed: false,
              [Symbol(refed)]: false,
              [Symbol(kHasPrimitive)]: false,
              [Symbol(asyncId)]: 2986,
              [Symbol(triggerId)]: 2984
            },
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 1,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              session: <Buffer 30 82 07 9e 02 01 01 02 02 03 04 04 02 13 03 04 20 c0 b7 b3 43 4c 5f 88 6d f2 0d df b6 9e f5 2f 4a 37 6e 7b ee e2 c0 27 2e 1f e1 40 73 ed a0 6a cf 04 ... 1904 more bytes>,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'DELETE',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'User-Agent': 'axios/1.4.0',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              family: undefined,
              lookup: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'graph.facebook.com',
              port: 443,
              agent: undefined,
              nativeProtocols: <ref *5> {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      keepAlive: true,
                      scheduling: 'lifo',
                      timeout: 5000,
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {},
                    freeSockets: [Object: null prototype] {
                      'graph.facebook.com:443:::::::::::::::::::::': [ [Circular *1] ]
                    },
                    keepAliveMsecs: 1000,
                    keepAlive: true,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'graph.facebook.com:443:::::::::::::::::::::': <Buffer 30 82 07 9f 02 01 01 02 02 03 04 04 02 13 03 04 20 27 c5 8c 2e 19 f3 05 ac 16 2c 2e e7 a4 47 01 f5 5a eb 56 4b 24 20 5b 84 3d 7a 96 b1 04 3d 0d 0e 04 ... 1905 more bytes>
                      },
                      list: [ 'graph.facebook.com:443:::::::::::::::::::::' ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/v16.0/112768655243132_193549723829605',
              search: '?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
              _defaultAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] {
                  keepAlive: true,
                  scheduling: 'lifo',
                  timeout: 5000,
                  noDelay: true,
                  path: null
                },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {
                  'graph.facebook.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                keepAliveMsecs: 1000,
                keepAlive: true,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'graph.facebook.com:443:::::::::::::::::::::': <Buffer 30 82 07 9f 02 01 01 02 02 03 04 04 02 13 03 04 20 27 c5 8c 2e 19 f3 05 ac 16 2c 2e e7 a4 47 01 f5 5a eb 56 4b 24 20 5b 84 3d 7a 96 b1 04 3d 0d 0e 04 ... 1905 more bytes>
                  },
                  list: [ 'graph.facebook.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'graph.facebook.com',
              keepAlive: true,
              scheduling: 'lifo',
              timeout: 5000,
              noDelay: true,
              servername: 'graph.facebook.com',
              _agentKey: 'graph.facebook.com:443:::::::::::::::::::::',
              encoding: null,
              keepAliveInitialDelay: 1000
            }
          },
          _header: 'DELETE /v16.0/112768655243132_193248887193022?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD HTTP/1.1\r\n' +
            'Accept: application/json, text/plain, */*\r\n' +
            'User-Agent: axios/1.4.0\r\n' +
            'Accept-Encoding: gzip, compress, deflate, br\r\n' +
            'Host: graph.facebook.com\r\n' +
            'Connection: keep-alive\r\n' +
            '\r\n',
          _keepAliveTimeout: 0,
          _onPendingData: [Function: nop],
          agent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] {
              keepAlive: true,
              scheduling: 'lifo',
              timeout: 5000,
              noDelay: true,
              path: null
            },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {},
            freeSockets: [Object: null prototype] {
              'graph.facebook.com:443:::::::::::::::::::::': [
                <ref *1> TLSSocket {
                  _tlsOptions: {
                    allowHalfOpen: undefined,
                    pipe: false,
                    secureContext: SecureContext { context: SecureContext {} },
                    isServer: false,
                    requestCert: true,
                    rejectUnauthorized: true,
                    session: <Buffer 30 82 07 9e 02 01 01 02 02 03 04 04 02 13 03 04 20 c0 b7 b3 43 4c 5f 88 6d f2 0d df b6 9e f5 2f 4a 37 6e 7b ee e2 c0 27 2e 1f e1 40 73 ed a0 6a cf 04 ... 1904 more bytes>,
                    ALPNProtocols: undefined,
                    requestOCSP: undefined,
                    enableTrace: undefined,
                    pskCallback: undefined,
                    highWaterMark: undefined,
                    onread: undefined,
                    signal: undefined
                  },
                  _secureEstablished: true,
                  _securePending: false,
                  _newSessionPending: false,
                  _controlReleased: true,
                  secureConnecting: false,
                  _SNICallback: null,
                  servername: 'graph.facebook.com',
                  alpnProtocol: false,
                  authorized: true,
                  authorizationError: null,
                  encrypted: true,
                  _events: [Object: null prototype] {
                    close: [
                      [Function: onSocketCloseDestroySSL],
                      [Function: bound onceWrapper] {
                        listener: [Function (anonymous)]
                      },
                      [Function: onClose]
                    ],
                    end: [Function: onReadableStreamEnd],
                    newListener: [Function: keylogNewListener],
                    secure: [Function: onConnectSecure],
                    session: [Function (anonymous)],
                    free: [Function: onFree],
                    timeout: [Function: onTimeout],
                    agentRemove: [Function: onRemove],
                    error: [Function: bound onceWrapper] {
                      listener: [Function: freeSocketErrorListener]
                    }
                  },
                  _eventsCount: 9,
                  connecting: false,
                  _hadError: false,
                  _parent: null,
                  _host: 'graph.facebook.com',
                  _closeAfterHandlingError: false,
                  _readableState: ReadableState {
                    highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: [],
                    awaitDrainWriters: null,
                    [Symbol(kState)]: 60035160
                  },
                  _maxListeners: undefined,
                  _writableState: WritableState {
                    highWaterMark: 16384,
                    length: 0,
                    corked: 0,
                    onwrite: [Function: bound onwrite],
                    writelen: 0,
                    bufferedIndex: 0,
                    pendingcb: 0,
                    [Symbol(kState)]: 34340932,
                    [Symbol(kBufferedValue)]: null,
                    [Symbol(kWriteCbValue)]: [Function: bound onFinish]
                  },
                  allowHalfOpen: false,
                  _sockname: null,
                  _pendingData: null,
                  _pendingEncoding: '',
                  server: undefined,
                  _server: null,
                  ssl: <ref *2> TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _parentWrap: null,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *1],
                    [Symbol(resource_symbol)]: ReusedHandle { type: 57, handle: [Circular *2] }
                  },
                  _requestCert: true,
                  _rejectUnauthorized: true,
                  timeout: 5000,
                  parser: null,
                  _httpMessage: null,
                  [Symbol(alpncallback)]: null,
                  [Symbol(res)]: <ref *2> TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _parentWrap: null,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *1],
                    [Symbol(resource_symbol)]: ReusedHandle { type: 57, handle: [Circular *2] }
                  },
                  [Symbol(verified)]: true,
                  [Symbol(pendingSession)]: null,
                  [Symbol(async_id_symbol)]: -1,
                  [Symbol(kHandle)]: <ref *2> TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _parentWrap: null,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *1],
                    [Symbol(resource_symbol)]: ReusedHandle { type: 57, handle: [Circular *2] }
                  },
                  [Symbol(lastWriteQueueSize)]: 0,
                  [Symbol(timeout)]: Timeout {
                    _idleTimeout: 5000,
                    _idlePrev: [TimersList],
                    _idleNext: [Timeout],
                    _idleStart: 152709,
                    _onTimeout: [Function: bound ],
                    _timerArgs: undefined,
                    _repeat: null,
                    _destroyed: false,
                    [Symbol(refed)]: false,
                    [Symbol(kHasPrimitive)]: false,
                    [Symbol(asyncId)]: 2986,
                    [Symbol(triggerId)]: 2984
                  },
                  [Symbol(kBuffer)]: null,
                  [Symbol(kBufferCb)]: null,
                  [Symbol(kBufferGen)]: null,
                  [Symbol(kCapture)]: false,
                  [Symbol(kSetNoDelay)]: false,
                  [Symbol(kSetKeepAlive)]: true,
                  [Symbol(kSetKeepAliveInitialDelay)]: 1,
                  [Symbol(kBytesRead)]: 0,
                  [Symbol(kBytesWritten)]: 0,
                  [Symbol(connect-options)]: {
                    rejectUnauthorized: true,
                    ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                    checkServerIdentity: [Function: checkServerIdentity],
                    minDHSize: 1024,
                    session: <Buffer 30 82 07 9e 02 01 01 02 02 03 04 04 02 13 03 04 20 c0 b7 b3 43 4c 5f 88 6d f2 0d df b6 9e f5 2f 4a 37 6e 7b ee e2 c0 27 2e 1f e1 40 73 ed a0 6a cf 04 ... 1904 more bytes>,
                    maxRedirects: 21,
                    maxBodyLength: Infinity,
                    protocol: 'https:',
                    path: null,
                    method: 'DELETE',
                    headers: [Object: null prototype] {
                      Accept: 'application/json, text/plain, */*',
                      'User-Agent': 'axios/1.4.0',
                      'Accept-Encoding': 'gzip, compress, deflate, br'
                    },
                    agents: { http: undefined, https: undefined },
                    auth: undefined,
                    family: undefined,
                    lookup: undefined,
                    beforeRedirect: [Function: dispatchBeforeRedirect],
                    beforeRedirects: { proxy: [Function: beforeRedirect] },
                    hostname: 'graph.facebook.com',
                    port: 443,
                    agent: undefined,
                    nativeProtocols: <ref *5> {
                      'http:': {
                        _connectionListener: [Function: connectionListener],
                        METHODS: [
                          'ACL',         'BIND',       'CHECKOUT',
                          'CONNECT',     'COPY',       'DELETE',
                          'GET',         'HEAD',       'LINK',
                          'LOCK',        'M-SEARCH',   'MERGE',
                          'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                          'MOVE',        'NOTIFY',     'OPTIONS',
                          'PATCH',       'POST',       'PROPFIND',
                          'PROPPATCH',   'PURGE',      'PUT',
                          'REBIND',      'REPORT',     'SEARCH',
                          'SOURCE',      'SUBSCRIBE',  'TRACE',
                          'UNBIND',      'UNLINK',     'UNLOCK',
                          'UNSUBSCRIBE'
                        ],
                        STATUS_CODES: {
                          '100': 'Continue',
                          '101': 'Switching Protocols',
                          '102': 'Processing',
                          '103': 'Early Hints',
                          '200': 'OK',
                          '201': 'Created',
                          '202': 'Accepted',
                          '203': 'Non-Authoritative Information',
                          '204': 'No Content',
                          '205': 'Reset Content',
                          '206': 'Partial Content',
                          '207': 'Multi-Status',
                          '208': 'Already Reported',
                          '226': 'IM Used',
                          '300': 'Multiple Choices',
                          '301': 'Moved Permanently',
                          '302': 'Found',
                          '303': 'See Other',
                          '304': 'Not Modified',
                          '305': 'Use Proxy',
                          '307': 'Temporary Redirect',
                          '308': 'Permanent Redirect',
                          '400': 'Bad Request',
                          '401': 'Unauthorized',
                          '402': 'Payment Required',
                          '403': 'Forbidden',
                          '404': 'Not Found',
                          '405': 'Method Not Allowed',
                          '406': 'Not Acceptable',
                          '407': 'Proxy Authentication Required',
                          '408': 'Request Timeout',
                          '409': 'Conflict',
                          '410': 'Gone',
                          '411': 'Length Required',
                          '412': 'Precondition Failed',
                          '413': 'Payload Too Large',
                          '414': 'URI Too Long',
                          '415': 'Unsupported Media Type',
                          '416': 'Range Not Satisfiable',
                          '417': 'Expectation Failed',
                          '418': "I'm a Teapot",
                          '421': 'Misdirected Request',
                          '422': 'Unprocessable Entity',
                          '423': 'Locked',
                          '424': 'Failed Dependency',
                          '425': 'Too Early',
                          '426': 'Upgrade Required',
                          '428': 'Precondition Required',
                          '429': 'Too Many Requests',
                          '431': 'Request Header Fields Too Large',
                          '451': 'Unavailable For Legal Reasons',
                          '500': 'Internal Server Error',
                          '501': 'Not Implemented',
                          '502': 'Bad Gateway',
                          '503': 'Service Unavailable',
                          '504': 'Gateway Timeout',
                          '505': 'HTTP Version Not Supported',
                          '506': 'Variant Also Negotiates',
                          '507': 'Insufficient Storage',
                          '508': 'Loop Detected',
                          '509': 'Bandwidth Limit Exceeded',
                          '510': 'Not Extended',
                          '511': 'Network Authentication Required'
                        },
                        Agent: [Function: Agent] {
                          defaultMaxSockets: Infinity
                        },
                        ClientRequest: [Function: ClientRequest],
                        IncomingMessage: [Function: IncomingMessage],
                        OutgoingMessage: [Function: OutgoingMessage],
                        Server: [Function: Server],
                        ServerResponse: [Function: ServerResponse],
                        createServer: [Function: createServer],
                        validateHeaderName: [Function: __node_internal_],
                        validateHeaderValue: [Function: __node_internal_],
                        get: [Function: get],
                        request: [Function: request],
                        setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                        maxHeaderSize: [Getter],
                        globalAgent: [Getter/Setter]
                      },
                      'https:': {
                        Agent: [Function: Agent],
                        globalAgent: [Circular *3],
                        Server: [Function: Server],
                        createServer: [Function: createServer],
                        get: [Function: get],
                        request: [Function: request]
                      }
                    },
                    pathname: '/v16.0/112768655243132_193549723829605',
                    search: '?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
                    _defaultAgent: [Circular *3],
                    host: 'graph.facebook.com',
                    keepAlive: true,
                    scheduling: 'lifo',
                    timeout: 5000,
                    noDelay: true,
                    servername: 'graph.facebook.com',
                    _agentKey: 'graph.facebook.com:443:::::::::::::::::::::',
                    encoding: null,
                    keepAliveInitialDelay: 1000
                  }
                }
              ]
            },
            keepAliveMsecs: 1000,
            keepAlive: true,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'graph.facebook.com:443:::::::::::::::::::::': <Buffer 30 82 07 9f 02 01 01 02 02 03 04 04 02 13 03 04 20 27 c5 8c 2e 19 f3 05 ac 16 2c 2e e7 a4 47 01 f5 5a eb 56 4b 24 20 5b 84 3d 7a 96 b1 04 3d 0d 0e 04 ... 1905 more bytes>
              },
              list: [ 'graph.facebook.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          socketPath: undefined,
          method: 'DELETE',
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          joinDuplicateHeaders: undefined,
          path: '/v16.0/112768655243132_193248887193022?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
          _ended: true,
          res: IncomingMessage {
            _readableState: ReadableState {
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              awaitDrainWriters: null,
              [Symbol(kState)]: 110426134
            },
            _events: [Object: null prototype] {
              end: [
                [Function: responseOnEnd],
                [Function: onend],
                [Function: onend]
              ],
              close: [
                [Function (anonymous)],
                [Function: onclose],
                [Function: onclose]
              ],
              finish: [ [Function: onfinish], [Function: onfinish] ],
              error: [
                [Function: onerror],
                [Function: onError],
                [Function: onerror]
              ]
            },
            _eventsCount: 4,
            _maxListeners: undefined,
            socket: null,
            httpVersionMajor: 1,
            httpVersionMinor: 1,
            httpVersion: '1.1',
            complete: true,
            rawHeaders: [
              'Content-Encoding',
              'br',
              'Vary',
              'Origin',
              'Vary',
              'Accept-Encoding',
              'Access-Control-Allow-Origin',
              '*',
              'cross-origin-resource-policy',
              'cross-origin',
              'x-app-usage',
              '{"call_count":0,"total_cputime":0,"total_time":0}',
              'Content-Type',
              'application/json',
              'WWW-Authenticate',
              `OAuth "Facebook Platform" "invalid_request" "Unsupported delete request. Object with ID '112768655243132_193248887193022' does not exist, cannot be loaded due to missing permissions, or does not support this operation. Please read the Graph API documentation at https://developers.facebook.com/docs/graph-api"`,
              'facebook-api-version',
              'v16.0',
              'Strict-Transport-Security',
              'max-age=15552000; preload',
              'Pragma',
              'no-cache',
              'Cache-Control',
              'no-store',
              'Expires',
              'Sat, 01 Jan 2000 00:00:00 GMT',
              'x-fb-request-id',
              'AYtqZB91Y6IPArM_djqbOb8',
              'x-fb-trace-id',
              'C+MEPd89hnu',
              'x-fb-rev',
              '1010466044',
              'X-FB-Debug',
              'KE0TRY3TGLE34joOn0QCfylaUo0Nk+mL3wIu6fqa2ZzwpHLeVQNz/fqjd8FRT3yTqF4ZZndEKFCx9Q/GSmhGlQ==',
              'Date',
              'Sat, 16 Dec 2023 11:17:52 GMT',
              'Proxy-Status',
              'http_request_error; e_clientaddr="AcK-Blw6eQHihGkELqIZLp45ofO9d4KBSVjEZpipIJFzEJCZ112XBr_rZGxXyFBo6y9-0MZJhQtd3Ur8Ni1n0EwWhxyifdDSfKWti5wUJ6AhdDU"; e_fb_vipport="AcJ8BCkP_nS8WuvJd1b3eskYBCmJOtzQ8hUPI44FHWTl1E2Bh3ffv-UFUj_p"; e_upip="AcJTI9ajOpvOzF88RlhSUFUI4JoLBHL6k0nrhU4TiHd3yS7lyo7wXt68TdKMCuLms2CBIIeFiQW3-1X_4_XgLiiB3gO9PWm1D1k"; e_fb_hostheader="AcJLvnbAz5l5GRJcLsY0mDkVCqAkY0XQ9gLN3YUqlmZSu4Ucn7Crkndc-WZIdkefeKiDSnKy_KN4Dqsl"; e_fb_vipaddr="AcLVTRLRQwmyTit7CkF5_0L3Oq3mPZNMKpFc8jKieRGt7ILRDZO427iz1cgr86SMRidqvQ1P2BY8PaSIE0pv4XxWGQpuRUwTOw"; e_fb_requesthandler="AcJeEm4zPQO1d6YLuw97duJBKQZaxPUtMs5U15aarsBd19sF9mcBo5PqoLAi9B4Nw4nvDyNif9k"; e_fb_builduser="AcL9eqqdZ9iR1nLLft5qA2tRX-JLYOed2be9HZIA0ZLPvLitByTInAxnyI5zTvGwHdM"; e_fb_binaryversion="AcKe_cCtX7EtEu8aJoHztTdxp4ImHaBcV8K4WXYxIaKJUcYhxU6faEa3eKmEMvLqhFnP4E7ltRQ8wrEonDP2MD5FrFPWXToEeKE"; e_proxy="AcLObYbXEbPHlvfBZtyB-Zy11oMSgr_SiAFAlB-IoG1RKO8EpgTYUl7PjKkXOZsxfox1IBCOdob3yvdnNmM", http_request_error; e_clientaddr="AcLxvALHGilBdzgLRhZRTSzf9E7GxW7nxWJSDCJYIfn7Tlbur19dksGvd6JIs9LBZWJhjqiwkiAqbbpUuQ"; e_fb_vipport="AcIZbTYZAif5vveM1f44pPqP8jmUQBxg-sle-XDJu5VBEWY-AD4mx9QbQycm"; e_upip="AcL5IbFbi_oLG6t5H0JPwsmb5Mc74G_w6g0oiGINtVc62jNE6a03wXW6wuHimi4cM1euUUKZaruBzEJErTa-ci3ZribsiMZgjA"; e_fb_hostheader="AcKMJ3dMiGUDcTOdqe_d7FLNuDkV_syd7NdMRBcX3Wq1UNR2FfkmQhh5uikVNJ5ZNZ9qdRI_OE4gIxoA"; e_fb_vipaddr="AcIIWReh37Uc1OEkvUJGjvCWwmxk3C2-pDDLbQ3rfWsXYl9DZp4L_Gt6rGFZUM0BNQD9yg"; e_fb_requesthandler="AcIMQh6a3nFjAjL5q51iTbpedpjdy5DcXivK2bMJadfiYG8ZYYXgHb8_vPJEUiTwkCEHpsQnfl8"; e_fb_builduser="AcKEFpaF7_DwLF2shPJKJ8f5Ua45Q6sQP1DzcZ3najXbulSNYI7i2ghI4SdEXiBSJEA"; e_fb_binaryversion="AcJ2nJTuXfFKG5SZEzv-xQmvEr0h8QY3bEVeuS_EhHOVvGeFT2MSnt4_oyQjdtrvIN98sesnLJyJkDWCmXilVPaW7yV08BswMuc"; e_proxy="AcKKzEsdD_9fDs-9vobgNDtWUDFXTz_wB1aTOMSny8AiaDEFhL9tQ9MZuDFqeAPpgrPdeP5eHJhi8Io"',
              'Alt-Svc',
              'h3=":443"; ma=86400',
              'Connection',
              'keep-alive',
              'Content-Length',
              '273'
            ],
            rawTrailers: [],
            joinDuplicateHeaders: undefined,
            aborted: false,
            upgrade: false,
            url: '',
            method: null,
            statusCode: 400,
            statusMessage: 'Bad Request',
            client: <ref *1> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: <Buffer 30 82 07 9e 02 01 01 02 02 03 04 04 02 13 03 04 20 c0 b7 b3 43 4c 5f 88 6d f2 0d df b6 9e f5 2f 4a 37 6e 7b ee e2 c0 27 2e 1f e1 40 73 ed a0 6a cf 04 ... 1904 more bytes>,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'graph.facebook.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: bound onceWrapper] {
                  listener: [Function: freeSocketErrorListener]
                }
              },
              _eventsCount: 9,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'graph.facebook.com',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                awaitDrainWriters: null,
                [Symbol(kState)]: 60035160
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                highWaterMark: 16384,
                length: 0,
                corked: 0,
                onwrite: [Function: bound onwrite],
                writelen: 0,
                bufferedIndex: 0,
                pendingcb: 0,
                [Symbol(kState)]: 34340932,
                [Symbol(kBufferedValue)]: null,
                [Symbol(kWriteCbValue)]: [Function: bound onFinish]
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: <ref *2> TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: null,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1],
                [Symbol(resource_symbol)]: ReusedHandle { type: 57, handle: [Circular *2] }
              },
              _requestCert: true,
              _rejectUnauthorized: true,
              timeout: 5000,
              parser: null,
              _httpMessage: null,
              [Symbol(alpncallback)]: null,
              [Symbol(res)]: <ref *2> TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: null,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1],
                [Symbol(resource_symbol)]: ReusedHandle { type: 57, handle: [Circular *2] }
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: -1,
              [Symbol(kHandle)]: <ref *2> TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: null,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1],
                [Symbol(resource_symbol)]: ReusedHandle { type: 57, handle: [Circular *2] }
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: Timeout {
                _idleTimeout: 5000,
                _idlePrev: [TimersList],
                _idleNext: [Timeout],
                _idleStart: 152709,
                _onTimeout: [Function: bound ],
                _timerArgs: undefined,
                _repeat: null,
                _destroyed: false,
                [Symbol(refed)]: false,
                [Symbol(kHasPrimitive)]: false,
                [Symbol(asyncId)]: 2986,
                [Symbol(triggerId)]: 2984
              },
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 1,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                session: <Buffer 30 82 07 9e 02 01 01 02 02 03 04 04 02 13 03 04 20 c0 b7 b3 43 4c 5f 88 6d f2 0d df b6 9e f5 2f 4a 37 6e 7b ee e2 c0 27 2e 1f e1 40 73 ed a0 6a cf 04 ... 1904 more bytes>,
                maxRedirects: 21,
                maxBodyLength: Infinity,
                protocol: 'https:',
                path: null,
                method: 'DELETE',
                headers: [Object: null prototype] {
                  Accept: 'application/json, text/plain, */*',
                  'User-Agent': 'axios/1.4.0',
                  'Accept-Encoding': 'gzip, compress, deflate, br'
                },
                agents: { http: undefined, https: undefined },
                auth: undefined,
                family: undefined,
                lookup: undefined,
                beforeRedirect: [Function: dispatchBeforeRedirect],
                beforeRedirects: { proxy: [Function: beforeRedirect] },
                hostname: 'graph.facebook.com',
                port: 443,
                agent: undefined,
                nativeProtocols: <ref *5> {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: <ref *3> Agent {
                      _events: [Object: null prototype] {
                        free: [Function (anonymous)],
                        newListener: [Function: maybeEnableKeylog]
                      },
                      _eventsCount: 2,
                      _maxListeners: undefined,
                      defaultPort: 443,
                      protocol: 'https:',
                      options: [Object: null prototype] {
                        keepAlive: true,
                        scheduling: 'lifo',
                        timeout: 5000,
                        noDelay: true,
                        path: null
                      },
                      requests: [Object: null prototype] {},
                      sockets: [Object: null prototype] {},
                      freeSockets: [Object: null prototype] {
                        'graph.facebook.com:443:::::::::::::::::::::': [ [Circular *1] ]
                      },
                      keepAliveMsecs: 1000,
                      keepAlive: true,
                      maxSockets: Infinity,
                      maxFreeSockets: 256,
                      scheduling: 'lifo',
                      maxTotalSockets: Infinity,
                      totalSocketCount: 1,
                      maxCachedSessions: 100,
                      _sessionCache: {
                        map: {
                          'graph.facebook.com:443:::::::::::::::::::::': <Buffer 30 82 07 9f 02 01 01 02 02 03 04 04 02 13 03 04 20 27 c5 8c 2e 19 f3 05 ac 16 2c 2e e7 a4 47 01 f5 5a eb 56 4b 24 20 5b 84 3d 7a 96 b1 04 3d 0d 0e 04 ... 1905 more bytes>
                        },
                        list: [
                          'graph.facebook.com:443:::::::::::::::::::::'
                        ]
                      },
                      [Symbol(kCapture)]: false
                    },
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/v16.0/112768655243132_193549723829605',
                search: '?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
                _defaultAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    keepAlive: true,
                    scheduling: 'lifo',
                    timeout: 5000,
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {},
                  freeSockets: [Object: null prototype] {
                    'graph.facebook.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  keepAliveMsecs: 1000,
                  keepAlive: true,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'graph.facebook.com:443:::::::::::::::::::::': <Buffer 30 82 07 9f 02 01 01 02 02 03 04 04 02 13 03 04 20 27 c5 8c 2e 19 f3 05 ac 16 2c 2e e7 a4 47 01 f5 5a eb 56 4b 24 20 5b 84 3d 7a 96 b1 04 3d 0d 0e 04 ... 1905 more bytes>
                    },
                    list: [ 'graph.facebook.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                host: 'graph.facebook.com',
                keepAlive: true,
                scheduling: 'lifo',
                timeout: 5000,
                noDelay: true,
                servername: 'graph.facebook.com',
                _agentKey: 'graph.facebook.com:443:::::::::::::::::::::',
                encoding: null,
                keepAliveInitialDelay: 1000
              }
            },
            _consuming: true,
            _dumped: false,
            req: [Circular *4],
            responseUrl: 'https://graph.facebook.com/v16.0/112768655243132_193248887193022?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
            redirects: [],
            [Symbol(kCapture)]: false,
            [Symbol(kHeaders)]: {
              vary: 'Origin, Accept-Encoding',
              'access-control-allow-origin': '*',
              'cross-origin-resource-policy': 'cross-origin',
              'x-app-usage': '{"call_count":0,"total_cputime":0,"total_time":0}',
              'content-type': 'application/json',
              'www-authenticate': `OAuth "Facebook Platform" "invalid_request" "Unsupported delete request. Object with ID '112768655243132_193248887193022' does not exist, cannot be loaded due to missing permissions, or does not support this operation. Please read the Graph API documentation at https://developers.facebook.com/docs/graph-api"`,
              'facebook-api-version': 'v16.0',
              'strict-transport-security': 'max-age=15552000; preload',
              pragma: 'no-cache',
              'cache-control': 'no-store',
              expires: 'Sat, 01 Jan 2000 00:00:00 GMT',
              'x-fb-request-id': 'AYtqZB91Y6IPArM_djqbOb8',
              'x-fb-trace-id': 'C+MEPd89hnu',
              'x-fb-rev': '1010466044',
              'x-fb-debug': 'KE0TRY3TGLE34joOn0QCfylaUo0Nk+mL3wIu6fqa2ZzwpHLeVQNz/fqjd8FRT3yTqF4ZZndEKFCx9Q/GSmhGlQ==',
              date: 'Sat, 16 Dec 2023 11:17:52 GMT',
              'proxy-status': 'http_request_error; e_clientaddr="AcK-Blw6eQHihGkELqIZLp45ofO9d4KBSVjEZpipIJFzEJCZ112XBr_rZGxXyFBo6y9-0MZJhQtd3Ur8Ni1n0EwWhxyifdDSfKWti5wUJ6AhdDU"; e_fb_vipport="AcJ8BCkP_nS8WuvJd1b3eskYBCmJOtzQ8hUPI44FHWTl1E2Bh3ffv-UFUj_p"; e_upip="AcJTI9ajOpvOzF88RlhSUFUI4JoLBHL6k0nrhU4TiHd3yS7lyo7wXt68TdKMCuLms2CBIIeFiQW3-1X_4_XgLiiB3gO9PWm1D1k"; e_fb_hostheader="AcJLvnbAz5l5GRJcLsY0mDkVCqAkY0XQ9gLN3YUqlmZSu4Ucn7Crkndc-WZIdkefeKiDSnKy_KN4Dqsl"; e_fb_vipaddr="AcLVTRLRQwmyTit7CkF5_0L3Oq3mPZNMKpFc8jKieRGt7ILRDZO427iz1cgr86SMRidqvQ1P2BY8PaSIE0pv4XxWGQpuRUwTOw"; e_fb_requesthandler="AcJeEm4zPQO1d6YLuw97duJBKQZaxPUtMs5U15aarsBd19sF9mcBo5PqoLAi9B4Nw4nvDyNif9k"; e_fb_builduser="AcL9eqqdZ9iR1nLLft5qA2tRX-JLYOed2be9HZIA0ZLPvLitByTInAxnyI5zTvGwHdM"; e_fb_binaryversion="AcKe_cCtX7EtEu8aJoHztTdxp4ImHaBcV8K4WXYxIaKJUcYhxU6faEa3eKmEMvLqhFnP4E7ltRQ8wrEonDP2MD5FrFPWXToEeKE"; e_proxy="AcLObYbXEbPHlvfBZtyB-Zy11oMSgr_SiAFAlB-IoG1RKO8EpgTYUl7PjKkXOZsxfox1IBCOdob3yvdnNmM", http_request_error; e_clientaddr="AcLxvALHGilBdzgLRhZRTSzf9E7GxW7nxWJSDCJYIfn7Tlbur19dksGvd6JIs9LBZWJhjqiwkiAqbbpUuQ"; e_fb_vipport="AcIZbTYZAif5vveM1f44pPqP8jmUQBxg-sle-XDJu5VBEWY-AD4mx9QbQycm"; e_upip="AcL5IbFbi_oLG6t5H0JPwsmb5Mc74G_w6g0oiGINtVc62jNE6a03wXW6wuHimi4cM1euUUKZaruBzEJErTa-ci3ZribsiMZgjA"; e_fb_hostheader="AcKMJ3dMiGUDcTOdqe_d7FLNuDkV_syd7NdMRBcX3Wq1UNR2FfkmQhh5uikVNJ5ZNZ9qdRI_OE4gIxoA"; e_fb_vipaddr="AcIIWReh37Uc1OEkvUJGjvCWwmxk3C2-pDDLbQ3rfWsXYl9DZp4L_Gt6rGFZUM0BNQD9yg"; e_fb_requesthandler="AcIMQh6a3nFjAjL5q51iTbpedpjdy5DcXivK2bMJadfiYG8ZYYXgHb8_vPJEUiTwkCEHpsQnfl8"; e_fb_builduser="AcKEFpaF7_DwLF2shPJKJ8f5Ua45Q6sQP1DzcZ3najXbulSNYI7i2ghI4SdEXiBSJEA"; e_fb_binaryversion="AcJ2nJTuXfFKG5SZEzv-xQmvEr0h8QY3bEVeuS_EhHOVvGeFT2MSnt4_oyQjdtrvIN98sesnLJyJkDWCmXilVPaW7yV08BswMuc"; e_proxy="AcKKzEsdD_9fDs-9vobgNDtWUDFXTz_wB1aTOMSny8AiaDEFhL9tQ9MZuDFqeAPpgrPdeP5eHJhi8Io"',
              'alt-svc': 'h3=":443"; ma=86400',
              connection: 'keep-alive',
              'content-length': '273'
            },
            [Symbol(kHeadersCount)]: 44,
            [Symbol(kTrailers)]: null,
            [Symbol(kTrailersCount)]: 0
          },
          aborted: false,
          timeoutCb: null,
          upgradeOrConnect: false,
          parser: null,
          maxHeadersCount: null,
          reusedSocket: true,
          host: 'graph.facebook.com',
          protocol: 'https:',
          _redirectable: Writable {
            _writableState: WritableState {
              highWaterMark: 16384,
              length: 0,
              corked: 0,
              onwrite: [Function: bound onwrite],
              writelen: 0,
              bufferedIndex: 0,
              pendingcb: 0,
              [Symbol(kState)]: 34357356,
              [Symbol(kBufferedValue)]: null
            },
            _events: [Object: null prototype] {
              response: [Function: handleResponse],
              error: [Function: handleRequestError],
              socket: [Function: handleRequestSocket]
            },
            _eventsCount: 3,
            _maxListeners: undefined,
            _options: {
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: '/v16.0/112768655243132_193248887193022?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
              method: 'DELETE',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'User-Agent': 'axios/1.4.0',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              family: undefined,
              lookup: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'graph.facebook.com',
              port: '',
              agent: undefined,
              nativeProtocols: <ref *5> {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      keepAlive: true,
                      scheduling: 'lifo',
                      timeout: 5000,
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {},
                    freeSockets: [Object: null prototype] {
                      'graph.facebook.com:443:::::::::::::::::::::': [
                        <ref *1> TLSSocket {
                          _tlsOptions: {
                            allowHalfOpen: undefined,
                            pipe: false,
                            secureContext: SecureContext { context: SecureContext {} },
                            isServer: false,
                            requestCert: true,
                            rejectUnauthorized: true,
                            session: <Buffer 30 82 07 9e 02 01 01 02 02 03 04 04 02 13 03 04 20 c0 b7 b3 43 4c 5f 88 6d f2 0d df b6 9e f5 2f 4a 37 6e 7b ee e2 c0 27 2e 1f e1 40 73 ed a0 6a cf 04 ... 1904 more bytes>,
                            ALPNProtocols: undefined,
                            requestOCSP: undefined,
                            enableTrace: undefined,
                            pskCallback: undefined,
                            highWaterMark: undefined,
                            onread: undefined,
                            signal: undefined
                          },
                          _secureEstablished: true,
                          _securePending: false,
                          _newSessionPending: false,
                          _controlReleased: true,
                          secureConnecting: false,
                          _SNICallback: null,
                          servername: 'graph.facebook.com',
                          alpnProtocol: false,
                          authorized: true,
                          authorizationError: null,
                          encrypted: true,
                          _events: [Object: null prototype] {
                            close: [
                              [Function: onSocketCloseDestroySSL],
                              [Function: bound onceWrapper] {
                                listener: [Function (anonymous)]
                              },
                              [Function: onClose]
                            ],
                            end: [Function: onReadableStreamEnd],
                            newListener: [Function: keylogNewListener],
                            secure: [Function: onConnectSecure],
                            session: [Function (anonymous)],
                            free: [Function: onFree],
                            timeout: [Function: onTimeout],
                            agentRemove: [Function: onRemove],
                            error: [Function: bound onceWrapper] {
                              listener: [Function: freeSocketErrorListener]
                            }
                          },
                          _eventsCount: 9,
                          connecting: false,
                          _hadError: false,
                          _parent: null,
                          _host: 'graph.facebook.com',
                          _closeAfterHandlingError: false,
                          _readableState: ReadableState {
                            highWaterMark: 16384,
                            buffer: BufferList { head: null, tail: null, length: 0 },
                            length: 0,
                            pipes: [],
                            awaitDrainWriters: null,
                            [Symbol(kState)]: 60035160
                          },
                          _maxListeners: undefined,
                          _writableState: WritableState {
                            highWaterMark: 16384,
                            length: 0,
                            corked: 0,
                            onwrite: [Function: bound onwrite],
                            writelen: 0,
                            bufferedIndex: 0,
                            pendingcb: 0,
                            [Symbol(kState)]: 34340932,
                            [Symbol(kBufferedValue)]: null,
                            [Symbol(kWriteCbValue)]: [Function: bound onFinish]
                          },
                          allowHalfOpen: false,
                          _sockname: null,
                          _pendingData: null,
                          _pendingEncoding: '',
                          server: undefined,
                          _server: null,
                          ssl: <ref *2> TLSWrap {
                            _parent: TCP {
                              reading: [Getter/Setter],
                              onconnection: null,
                              [Symbol(owner_symbol)]: [Circular *1]
                            },
                            _parentWrap: null,
                            _secureContext: SecureContext { context: SecureContext {} },
                            reading: true,
                            onkeylog: [Function: onkeylog],
                            onhandshakestart: {},
                            onhandshakedone: [Function (anonymous)],
                            onocspresponse: [Function: onocspresponse],
                            onnewsession: [Function: onnewsessionclient],
                            onerror: [Function: onerror],
                            [Symbol(owner_symbol)]: [Circular *1],
                            [Symbol(resource_symbol)]: ReusedHandle {
                              type: 57,
                              handle: [Circular *2]
                            }
                          },
                          _requestCert: true,
                          _rejectUnauthorized: true,
                          timeout: 5000,
                          parser: null,
                          _httpMessage: null,
                          [Symbol(alpncallback)]: null,
                          [Symbol(res)]: <ref *2> TLSWrap {
                            _parent: TCP {
                              reading: [Getter/Setter],
                              onconnection: null,
                              [Symbol(owner_symbol)]: [Circular *1]
                            },
                            _parentWrap: null,
                            _secureContext: SecureContext { context: SecureContext {} },
                            reading: true,
                            onkeylog: [Function: onkeylog],
                            onhandshakestart: {},
                            onhandshakedone: [Function (anonymous)],
                            onocspresponse: [Function: onocspresponse],
                            onnewsession: [Function: onnewsessionclient],
                            onerror: [Function: onerror],
                            [Symbol(owner_symbol)]: [Circular *1],
                            [Symbol(resource_symbol)]: ReusedHandle {
                              type: 57,
                              handle: [Circular *2]
                            }
                          },
                          [Symbol(verified)]: true,
                          [Symbol(pendingSession)]: null,
                          [Symbol(async_id_symbol)]: -1,
                          [Symbol(kHandle)]: <ref *2> TLSWrap {
                            _parent: TCP {
                              reading: [Getter/Setter],
                              onconnection: null,
                              [Symbol(owner_symbol)]: [Circular *1]
                            },
                            _parentWrap: null,
                            _secureContext: SecureContext { context: SecureContext {} },
                            reading: true,
                            onkeylog: [Function: onkeylog],
                            onhandshakestart: {},
                            onhandshakedone: [Function (anonymous)],
                            onocspresponse: [Function: onocspresponse],
                            onnewsession: [Function: onnewsessionclient],
                            onerror: [Function: onerror],
                            [Symbol(owner_symbol)]: [Circular *1],
                            [Symbol(resource_symbol)]: ReusedHandle {
                              type: 57,
                              handle: [Circular *2]
                            }
                          },
                          [Symbol(lastWriteQueueSize)]: 0,
                          [Symbol(timeout)]: Timeout {
                            _idleTimeout: 5000,
                            _idlePrev: [TimersList],
                            _idleNext: [Timeout],
                            _idleStart: 152709,
                            _onTimeout: [Function: bound ],
                            _timerArgs: undefined,
                            _repeat: null,
                            _destroyed: false,
                            [Symbol(refed)]: false,
                            [Symbol(kHasPrimitive)]: false,
                            [Symbol(asyncId)]: 2986,
                            [Symbol(triggerId)]: 2984
                          },
                          [Symbol(kBuffer)]: null,
                          [Symbol(kBufferCb)]: null,
                          [Symbol(kBufferGen)]: null,
                          [Symbol(kCapture)]: false,
                          [Symbol(kSetNoDelay)]: false,
                          [Symbol(kSetKeepAlive)]: true,
                          [Symbol(kSetKeepAliveInitialDelay)]: 1,
                          [Symbol(kBytesRead)]: 0,
                          [Symbol(kBytesWritten)]: 0,
                          [Symbol(connect-options)]: {
                            rejectUnauthorized: true,
                            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                            checkServerIdentity: [Function: checkServerIdentity],
                            minDHSize: 1024,
                            session: <Buffer 30 82 07 9e 02 01 01 02 02 03 04 04 02 13 03 04 20 c0 b7 b3 43 4c 5f 88 6d f2 0d df b6 9e f5 2f 4a 37 6e 7b ee e2 c0 27 2e 1f e1 40 73 ed a0 6a cf 04 ... 1904 more bytes>,
                            maxRedirects: 21,
                            maxBodyLength: Infinity,
                            protocol: 'https:',
                            path: null,
                            method: 'DELETE',
                            headers: [Object: null prototype] {
                              Accept: 'application/json, text/plain, */*',
                              'User-Agent': 'axios/1.4.0',
                              'Accept-Encoding': 'gzip, compress, deflate, br'
                            },
                            agents: { http: undefined, https: undefined },
                            auth: undefined,
                            family: undefined,
                            lookup: undefined,
                            beforeRedirect: [Function: dispatchBeforeRedirect],
                            beforeRedirects: { proxy: [Function: beforeRedirect] },
                            hostname: 'graph.facebook.com',
                            port: 443,
                            agent: undefined,
                            nativeProtocols: [Circular *5],
                            pathname: '/v16.0/112768655243132_193549723829605',
                            search: '?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
                            _defaultAgent: [Circular *3],
                            host: 'graph.facebook.com',
                            keepAlive: true,
                            scheduling: 'lifo',
                            timeout: 5000,
                            noDelay: true,
                            servername: 'graph.facebook.com',
                            _agentKey: 'graph.facebook.com:443:::::::::::::::::::::',
                            encoding: null,
                            keepAliveInitialDelay: 1000
                          }
                        }
                      ]
                    },
                    keepAliveMsecs: 1000,
                    keepAlive: true,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'graph.facebook.com:443:::::::::::::::::::::': <Buffer 30 82 07 9f 02 01 01 02 02 03 04 04 02 13 03 04 20 27 c5 8c 2e 19 f3 05 ac 16 2c 2e e7 a4 47 01 f5 5a eb 56 4b 24 20 5b 84 3d 7a 96 b1 04 3d 0d 0e 04 ... 1905 more bytes>
                      },
                      list: [ 'graph.facebook.com:443:::::::::::::::::::::' ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/v16.0/112768655243132_193248887193022',
              search: '?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD'
            },
            _ended: true,
            _ending: true,
            _redirectCount: 0,
            _redirects: [],
            _requestBodyLength: 0,
            _requestBodyBuffers: [],
            _onNativeResponse: [Function (anonymous)],
            _currentRequest: [Circular *4],
            _currentUrl: 'https://graph.facebook.com/v16.0/112768655243132_193248887193022?access_token=EAAC6VEEU92EBOZCFX4Ie0svOZAnTHO0D5ZBxwYa0K8HerajQ5dehf4TvskcqtaZA8PADgR0xZB1UfQBdWclt9c0Qw1EAG3nusG4NZCwJAwqYYec9wh3mvYSwokEhrI5O4sr6xpDaiyihlfkZB1moDJlgsYhVObBlfqgtd3cBBcXdY2DNHELqF2TNkxcCW3OQUvjzKPNbEWinmsfd7cZD',
            [Symbol(kCapture)]: false
          },
          [Symbol(kCapture)]: false,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(kNeedDrain)]: false,
          [Symbol(corked)]: 0,
          [Symbol(kOutHeaders)]: [Object: null prototype] {
            accept: [ 'Accept', 'application/json, text/plain, */*' ],
            'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
            'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
            host: [ 'Host', 'graph.facebook.com' ]
          },
          [Symbol(errored)]: null,
          [Symbol(kHighWaterMark)]: 16384,
          [Symbol(kRejectNonStandardBodyWrites)]: false,
          [Symbol(kUniqueHeaders)]: null
        },
        data: {
          error: {
            message: "Unsupported delete request. Object with ID '112768655243132_193248887193022' does not exist, cannot be loaded due to missing permissions, or does not support this operation. Please read the Graph API documentation at https://developers.facebook.com/docs/graph-api",
            type: 'GraphMethodException',
            code: 100,
            error_subcode: 33,
            fbtrace_id: 'AYtqZB91Y6IPArM_djqbOb8'
          }
        }
      }
    }
  },
  level: 'error'
}
{
  message: {
    function: 'DatabaseHandler.FindById',
    error: PrismaClientValidationError: 
    Invalid `prisma.users.findUniqueOrThrow()` invocation:
    
    {
      where: {
        id: "4c2b66ed-b656-41de-96d0-664c25f9ba55"
      },
      include: {
        isVerified: true,
        ~~~~~~~~~~
        lastName: true,
        id: true,
        username: true,
        name: true,
        rol: true,
    ?   posts?: true,
    ?   Video?: true,
    ?   RadioPost?: true,
    ?   Ads?: true,
    ?   Addresses?: true
      }
    }
    
    Invalid scalar field `isVerified` for include statement on model Users. Available options are listed in green.
    Note that include statements only accept relation fields.
        at Ur (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:5803)
        at ht.throwValidationError (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:8966)
        at Cp (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:7087)
        at vp (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:6976)
        at Tp (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:6872)
        at oi (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:6734)
        at ra (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:6646)
        at C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:126:10605
        at Object.runInChildSpan (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:122:1393)
        at t._executeRequest (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:126:10584) {
      clientVersion: '5.0.0'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'AuthService.jwtLoginVerify',
    error: TypeError: Cannot use 'in' operator to search for 'username' in null
        at AuthService.<anonymous> (C:\Users\aabadin\Documents\code\informe5Backend\auth\auth.service.ts:68:23)
        at Generator.next (<anonymous>)
        at fulfilled (C:\Users\aabadin\Documents\code\informe5Backend\auth\auth.service.ts:5:58)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
  },
  level: 'error'
}
{
  message: {
    function: 'DatabaseHandler.FindById',
    error: PrismaClientValidationError: 
    Invalid `prisma.users.findUniqueOrThrow()` invocation:
    
    {
      where: {
        id: "4c2b66ed-b656-41de-96d0-664c25f9ba55"
      },
      include: {
        isVerified: true,
        ~~~~~~~~~~
        lastName: true,
        id: true,
        username: true,
        name: true,
        rol: true,
    ?   posts?: true,
    ?   Video?: true,
    ?   RadioPost?: true,
    ?   Ads?: true,
    ?   Addresses?: true
      }
    }
    
    Invalid scalar field `isVerified` for include statement on model Users. Available options are listed in green.
    Note that include statements only accept relation fields.
        at Ur (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:5803)
        at ht.throwValidationError (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:8966)
        at Cp (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:7087)
        at vp (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:6976)
        at Tp (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:6872)
        at oi (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:6734)
        at ra (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:6646)
        at C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:126:10605
        at Object.runInChildSpan (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:122:1393)
        at t._executeRequest (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:126:10584) {
      clientVersion: '5.0.0'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'AuthService.jwtLoginVerify',
    error: TypeError: Cannot use 'in' operator to search for 'username' in null
        at AuthService.<anonymous> (C:\Users\aabadin\Documents\code\informe5Backend\auth\auth.service.ts:68:23)
        at Generator.next (<anonymous>)
        at fulfilled (C:\Users\aabadin\Documents\code\informe5Backend\auth\auth.service.ts:5:58)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
  },
  level: 'error'
}
{
  message: {
    function: 'DatabaseHandler.FindById',
    error: PrismaClientValidationError: 
    Invalid `prisma.users.findUniqueOrThrow()` invocation:
    
    {
      where: {
        id: "4c2b66ed-b656-41de-96d0-664c25f9ba55"
      },
      include: {
        isVerified: true,
        ~~~~~~~~~~
        lastName: true,
        id: true,
        username: true,
        name: true,
        rol: true,
    ?   posts?: true,
    ?   Video?: true,
    ?   RadioPost?: true,
    ?   Ads?: true,
    ?   Addresses?: true
      }
    }
    
    Invalid scalar field `isVerified` for include statement on model Users. Available options are listed in green.
    Note that include statements only accept relation fields.
        at Ur (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:5803)
        at ht.throwValidationError (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:8966)
        at Cp (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:7087)
        at vp (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:6976)
        at Tp (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:6872)
        at oi (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:6734)
        at ra (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:6646)
        at C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:126:10605
        at Object.runInChildSpan (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:122:1393)
        at t._executeRequest (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:126:10584) {
      clientVersion: '5.0.0'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'AuthService.jwtLoginVerify',
    error: TypeError: Cannot use 'in' operator to search for 'username' in null
        at AuthService.<anonymous> (C:\Users\aabadin\Documents\code\informe5Backend\auth\auth.service.ts:68:23)
        at Generator.next (<anonymous>)
        at fulfilled (C:\Users\aabadin\Documents\code\informe5Backend\auth\auth.service.ts:5:58)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
  },
  level: 'error'
}
{
  message: {
    function: 'DatabaseHandler.FindById',
    error: PrismaClientValidationError: 
    Invalid `prisma.users.findUniqueOrThrow()` invocation:
    
    {
      where: {
        id: "4c2b66ed-b656-41de-96d0-664c25f9ba55"
      },
      include: {
        isVerified: true,
        ~~~~~~~~~~
        lastName: true,
        id: true,
        username: true,
        name: true,
        rol: true,
    ?   posts?: true,
    ?   Video?: true,
    ?   RadioPost?: true,
    ?   Ads?: true,
    ?   Addresses?: true
      }
    }
    
    Invalid scalar field `isVerified` for include statement on model Users. Available options are listed in green.
    Note that include statements only accept relation fields.
        at Ur (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:5803)
        at ht.throwValidationError (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:8966)
        at Cp (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:7087)
        at vp (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:6976)
        at Tp (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:6872)
        at oi (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:6734)
        at ra (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:6646)
        at C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:126:10605
        at Object.runInChildSpan (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:122:1393)
        at t._executeRequest (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:126:10584) {
      clientVersion: '5.0.0'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'AuthService.jwtLoginVerify',
    error: TypeError: Cannot use 'in' operator to search for 'username' in null
        at AuthService.<anonymous> (C:\Users\aabadin\Documents\code\informe5Backend\auth\auth.service.ts:68:23)
        at Generator.next (<anonymous>)
        at fulfilled (C:\Users\aabadin\Documents\code\informe5Backend\auth\auth.service.ts:5:58)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
  },
  level: 'error'
}
{
  message: {
    function: 'DatabaseHandler.FindById',
    error: PrismaClientValidationError: 
    Invalid `prisma.users.findUniqueOrThrow()` invocation:
    
    {
      where: {
        id: "4c2b66ed-b656-41de-96d0-664c25f9ba55"
      },
      include: {
        isVerified: true,
        ~~~~~~~~~~
        lastName: true,
        id: true,
        username: true,
        name: true,
        rol: true,
    ?   posts?: true,
    ?   Video?: true,
    ?   RadioPost?: true,
    ?   Ads?: true,
    ?   Addresses?: true
      }
    }
    
    Invalid scalar field `isVerified` for include statement on model Users. Available options are listed in green.
    Note that include statements only accept relation fields.
        at Ur (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:5803)
        at ht.throwValidationError (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:8966)
        at Cp (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:7087)
        at vp (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:6976)
        at Tp (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:6872)
        at oi (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:6734)
        at ra (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:6646)
        at C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:126:10605
        at Object.runInChildSpan (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:122:1393)
        at t._executeRequest (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:126:10584) {
      clientVersion: '5.0.0'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'AuthService.jwtLoginVerify',
    error: TypeError: Cannot use 'in' operator to search for 'username' in null
        at AuthService.<anonymous> (C:\Users\aabadin\Documents\code\informe5Backend\auth\auth.service.ts:68:23)
        at Generator.next (<anonymous>)
        at fulfilled (C:\Users\aabadin\Documents\code\informe5Backend\auth\auth.service.ts:5:58)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
  },
  level: 'error'
}
{
  message: {
    function: 'DatabaseHandler.FindById',
    error: PrismaClientValidationError: 
    Invalid `prisma.users.findUniqueOrThrow()` invocation:
    
    {
      where: {
        id: "4c2b66ed-b656-41de-96d0-664c25f9ba55"
      },
      include: {
        isVerified: true,
        ~~~~~~~~~~
        lastName: true,
        id: true,
        username: true,
        name: true,
        rol: true,
    ?   posts?: true,
    ?   Video?: true,
    ?   RadioPost?: true,
    ?   Ads?: true,
    ?   Addresses?: true
      }
    }
    
    Invalid scalar field `isVerified` for include statement on model Users. Available options are listed in green.
    Note that include statements only accept relation fields.
        at Ur (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:5803)
        at ht.throwValidationError (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:8966)
        at Cp (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:7087)
        at vp (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:6976)
        at Tp (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:6872)
        at oi (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:6734)
        at ra (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:6646)
        at C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:126:10605
        at Object.runInChildSpan (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:122:1393)
        at t._executeRequest (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:126:10584) {
      clientVersion: '5.0.0'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'AuthService.jwtLoginVerify',
    error: TypeError: Cannot use 'in' operator to search for 'username' in null
        at AuthService.<anonymous> (C:\Users\aabadin\Documents\code\informe5Backend\auth\auth.service.ts:68:23)
        at Generator.next (<anonymous>)
        at fulfilled (C:\Users\aabadin\Documents\code\informe5Backend\auth\auth.service.ts:5:58)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
  },
  level: 'error'
}
{
  message: {
    function: 'DatabaseHandler.FindById',
    error: PrismaClientValidationError: 
    Invalid `prisma.users.findUniqueOrThrow()` invocation:
    
    {
      where: {
        id: "4c2b66ed-b656-41de-96d0-664c25f9ba55"
      },
      include: {
        isVerified: true,
        ~~~~~~~~~~
        lastName: true,
        id: true,
        username: true,
        name: true,
        rol: true,
    ?   posts?: true,
    ?   Video?: true,
    ?   RadioPost?: true,
    ?   Ads?: true,
    ?   Addresses?: true
      }
    }
    
    Invalid scalar field `isVerified` for include statement on model Users. Available options are listed in green.
    Note that include statements only accept relation fields.
        at Ur (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:5803)
        at ht.throwValidationError (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:8966)
        at Cp (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:7087)
        at vp (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:6976)
        at Tp (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:6872)
        at oi (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:6734)
        at ra (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:115:6646)
        at C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:126:10605
        at Object.runInChildSpan (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:122:1393)
        at t._executeRequest (C:\Users\aabadin\Documents\code\informe5Backend\node_modules\@prisma\client\runtime\library.js:126:10584) {
      clientVersion: '5.0.0'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'AuthService.jwtLoginVerify',
    error: TypeError: Cannot use 'in' operator to search for 'username' in null
        at AuthService.<anonymous> (C:\Users\aabadin\Documents\code\informe5Backend\auth\auth.service.ts:68:23)
        at Generator.next (<anonymous>)
        at fulfilled (C:\Users\aabadin\Documents\code\informe5Backend\auth\auth.service.ts:5:58)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
  },
  level: 'error'
}
