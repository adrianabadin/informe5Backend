// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserRoles {
  GOD
  ADMIN
  WRITER
  USER
}

model Session {
  id        String   @id @default(uuid())
  sid       String   @unique
  data      String   @db.LongText
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Metric {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  timeStart    Int
  timeEnd      Int
  visitCounter Int
  Ads          Ads?       @relation(fields: [adsId], references: [id])
  adsId        String?
  Posts        Posts?     @relation(fields: [postsId], references: [id])
  postsId      String?
  Video        Video?     @relation(fields: [videoId], references: [id])
  videoId      String?
  RadioPost    RadioPost? @relation(fields: [radioPostId], references: [id])
  radioPostId  String?

  @@index([adsId])
  @@index([postsId])
  @@index([videoId])
  @@index([radioPostId])
}

model Addresses {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  street    String
  number    Int
  city      String
  state     String
  zipCode   String
  Users     Users[]
}

enum Gender {
  MALE
  FEMALE
  NOT_BINARY
}

model Users {
  id           String      @id @default(uuid())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  name         String
  lastName     String
  username     String      @unique
  phone        String
  hash         String?
  birthDate    DateTime?
  rol          UserRoles   @default(USER)
  posts        Posts[]
  isVerified   Boolean     @default(false)
  Video        Video[]
  RadioPost    RadioPost[]
  Ads          Ads[]
  password     String?
  accessToken  String?     @db.LongText
  refreshToken String?     @db.LongText
  gender       Gender?
  avatar       String?
  fbid         String?
  Addresses    Addresses?  @relation(fields: [addressesId], references: [id])
  addressesId  String?

  @@index([username])
  @@index([addressesId])
}

model Photos {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String   @db.Text
  fbid      String   @db.Text
  Posts     Posts[]
}

model Ads {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  importance Int
  metrics    Metric[]
  user       Users    @relation(fields: [usersId], references: [id])
  usersId    String
  url        String?
  title      String
  photoUrl   String

  @@index([usersId])
}

model Posts {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  title          String
  subTitle       String?
  heading        String   @db.LongText
  text           String   @db.LongText
  classification String
  images         Photos[]
  author         Users    @relation(fields: [usersId], references: [id])
  usersId        String
  importance     Int      @default(1)
  fbid           String?
  metrics        Metric[]
  isVisible      Boolean

  @@index([usersId])
  @@fulltext([title])
  @@fulltext([title, text, heading, subTitle])
}

model Video {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  url        String
  text       String
  tags       String
  title      String
  author     Users    @relation(fields: [usersId], references: [id])
  usersId    String
  importance Int
  metrics    Metric[]
  isVisible  Boolean

  @@index([usersId])
}

model RadioPost {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  importance      Int
  visitCount      Int
  minTimeExposure Int
  author          Users    @relation(fields: [usersId], references: [id])
  usersId         String
  title           String
  text            String
  tags            String
  metrics         Metric[]
  isVisible       Boolean

  @@index([usersId])
}
