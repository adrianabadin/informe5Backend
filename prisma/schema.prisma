// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
  // relationMode = "prisma"
}

model UserRoles {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      String   @unique
  // GOD
  // ADMIN
  // WRITER
  // USER
  Users     Users[]
}

model Session {
  id        String   @id @default(uuid())
  sid       String   @unique
  data      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Metric {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  timeStart    Int
  timeEnd      Int
  visitCounter Int
  Ads          Ads?       @relation(fields: [adsId], references: [id])
  adsId        String?
  Posts        Posts?     @relation(fields: [postsId], references: [id])
  postsId      String?
  Video        Video?     @relation(fields: [videoId], references: [id])
  videoId      String?
  RadioPost    RadioPost? @relation(fields: [radioPostId], references: [id])
  radioPostId  String?
  Audio        Audio?     @relation(fields: [audioId], references: [id])
  audioId      String?

  @@index([adsId])
  @@index([postsId])
  @@index([videoId])
  @@index([radioPostId])
}

model Addresses {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  street    String
  number    Int
  city      String
  state     String
  zipCode   String
  Users     Users[]
}

model Gender {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  gender    String   @unique
  // MALE
  // FEMALE
  // NOT_BINARY
  Users     Users[]
}

model Users {
  id                String      @id @default(uuid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  name              String
  lastName          String
  username          String      @unique
  phone             String
  hash              String?
  birthDate         DateTime?
  rol               UserRoles   @relation(fields: [userRolesId], references: [id])
  posts             Posts[]
  isVerified        Boolean     @default(false)
  Video             Video[]
  RadioPost         RadioPost[]
  Ads               Ads[]
  password          String?
  accessToken       String?
  refreshToken      String?
  innerRefreshToken String?
  gender            Gender?     @relation(fields: [genderId], references: [id])
  avatar            String?
  fbid              String?
  Addresses         Addresses?  @relation(fields: [addressesId], references: [id])
  addressesId       String?
  genderId          String?
  userRolesId       String

  @@index([username])
  @@index([addressesId])
}

model DataConfig {
  id            Int      @id @unique @default(1)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  refreshToken  String?
  facebookToken String?
}

model Photos {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String
  fbid      String
  Posts     Posts[]
}

model Ads {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  importance String
  metrics    Metric[]
  user       Users    @relation(fields: [usersId], references: [id])
  usersId    String
  url        String?
  title      String
  photoUrl   String
  isActive   Boolean  @default(true)

  @@index([usersId])
}

model Posts {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  title          String
  subTitle       String?
  heading        String
  text           String
  classification String
  images         Photos[]
  audio          Audio[]
  video          Video[]
  author         Users    @relation(fields: [usersId], references: [id])
  usersId        String
  importance     Int      @default(1)
  fbid           String?
  metrics        Metric[]
  isVisible      Boolean

  @@index([usersId])
}

model Video {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String?
  youtubeId String?  @unique
  author    Users    @relation(fields: [usersId], references: [id])
  usersId   String
  metrics   Metric[]
  Posts     Posts?   @relation(fields: [postsId], references: [id])
  postsId   String?

  @@index([usersId])
}

model RadioPost {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  importance      Int
  visitCount      Int
  minTimeExposure Int
  author          Users    @relation(fields: [usersId], references: [id])
  usersId         String
  title           String
  text            String
  tags            String
  metrics         Metric[]
  isVisible       Boolean

  @@index([usersId])
}

model Audio {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  driveId   String
  metrics   Metric[]
  Posts     Posts?   @relation(fields: [postsId], references: [id])
  postsId   String?

  @@index([postsId])
}
